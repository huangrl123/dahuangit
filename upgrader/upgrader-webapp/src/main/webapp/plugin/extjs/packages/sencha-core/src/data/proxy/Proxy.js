Ext.define("Ext.data.proxy.Proxy",{mixins:["Ext.mixin.Factoryable","Ext.mixin.Observable"],$configPrefixed:false,alias:"proxy.proxy",alternateClassName:["Ext.data.DataProxy","Ext.data.Proxy"],requires:["Ext.data.schema.Schema","Ext.data.reader.Reader","Ext.data.writer.Writer"],uses:["Ext.data.Batch","Ext.data.operation.*","Ext.data.Model"],config:{batchOrder:"create,update,destroy",batchActions:true,model:undefined,reader:{type:"json"},writer:{type:"json"}},isProxy:true,isSynchronous:false,constructor:function(A){this.mixins.observable.constructor.call(this,A)},applyModel:function(A){return Ext.data.schema.Schema.lookupEntity(A)},updateModel:function(B){if(B){var A=this.getReader();if(A&&!A.getModel()){A.setModel(B)}}},applyReader:function(A){return Ext.Factory.reader(A)},updateReader:function(B){if(B){var A=this,C=A.getModel();if(!C){C=B.getModel();if(C){A.setModel(C)}}else{B.setModel(C)}if(B.onMetaChange){B.onMetaChange=Ext.Function.createSequence(B.onMetaChange,A.onMetaChange,A)}}},applyWriter:function(A){return Ext.Factory.writer(A)},abort:Ext.emptyFn,onMetaChange:function(A){this.fireEvent("metachange",this,A)},create:Ext.emptyFn,read:Ext.emptyFn,update:Ext.emptyFn,erase:Ext.emptyFn,batch:function(G,H){var A=this,I=A.getBatchActions(),F,D,C,E,L,K,B,M,J;if(G.operations===undefined){G={operations:G,listeners:H}}if(G.batch){if(Ext.isDefined(G.batch.runOperation)){F=Ext.applyIf(G.batch,{proxy:A,listeners:{}})}}else{G.batch={proxy:A,listeners:G.listeners||{}}}if(!F){F=new Ext.data.Batch(G.batch)}F.on("complete",Ext.bind(A.onBatchComplete,A,[G],0));C=A.getBatchOrder().split(",");E=C.length;for(K=0;K<E;K++){L=C[K];D=G.operations[L];if(D){if(I){F.add(A.createOperation(L,{records:D,params:G.params}))}else{M=D.length;for(B=0;B<M;B++){J=D[B];F.add(A.createOperation(L,{records:[J],params:G.params}))}}}}F.start();return F},onBatchComplete:function(A,C){var B=A.scope||this;if(C.hasException()){if(Ext.isFunction(A.failure)){Ext.callback(A.failure,B,[C,A])}}else{if(Ext.isFunction(A.success)){Ext.callback(A.success,B,[C,A])}}if(Ext.isFunction(A.callback)){Ext.callback(A.callback,B,[C,A])}},createOperation:function(A,B){var C=Ext.createByAlias("data.operation."+A,B);C.setProxy(this);return C},clone:function(){return new this.self(this.getInitialConfig())}});
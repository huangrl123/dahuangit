Ext.define("Ext.data.schema.ManyToMany",{extend:"Ext.data.schema.Association",isManyToMany:true,isToMany:true,kind:"many-to-many",Left:Ext.define(null,{extend:"Ext.data.schema.Role",isMany:true,digitRe:/^\d+$/,validateAssociationRecords:function(H,F,E){var A=H.getMatrixSlice(this.inverse,F.id),B=A.members,D=this.cls,L=[],I,G,K,J,C;if(E){I={};for(G=0,K=E.length;G<K;++G){rec=E[G];J=rec.id;C=B[J];if(!(C&&C[2]===-1)){L.push(rec)}I[J]=true}}for(J in B){C=B[J];if(!I||!I[J]&&(C&&C[2]!==-1)){rec=H.peekRecord(D,J);if(rec){L.push(rec)}}}return L},processUpdate:function(B,D){var F=this,C=F.inverse.cls,H=D.R,E,G,A;if(H){for(E in H){G=B.peekRecord(C,E);if(G){records=B.getEntityList(F.cls,H[E]);A=F.getAssociatedItem(G);if(A){records=F.validateAssociationRecords(B,G,records);A.loadRecords(records);A.complete=true;F.onAddToMany(A,records,true)}else{G[F.getterName](null,null,records)}}else{B.onInvalidAssociationEntity(C,E)}}}F.processMatrixBlock(B,D.C,1);F.processMatrixBlock(B,D.D,-1)},checkMembership:function(H,J,G){var C=this.left?G.right:G.left,I=C.inverse.role.cls,K=this.inverse,F=C.slices,A,E,B,D,L;if(F){A=F[J.id];if(A){B=A.members;for(E in B){D=B[E];if(D[2]!==-1){L=H.peekRecord(I,E);if(L){store=K.getAssociatedItem(L);if(store){store.matrixUpdate=1;store.add(J);store.matrixUpdate=0}}}}}}},processMatrixBlock:function(A,E,G){var B=this.inverse,D=this.digitRe,F,C;if(E){for(C in E){if(D.test(C)){C=parseInt(C,10)}F=A.getMatrixSlice(B,C);F.update(E[C],G)}}},createGetter:function(){var A=this;return function(D,E,C){var B=this.session,F;if(B){F=!!C;C=A.validateAssociationRecords(B,this,C);if(!F&&!C.length){C=null}}return A.getAssociatedStore(this,D,E,C,F)}},onAddToMany:function(A,B,C){if(!A.matrixUpdate){A.matrixUpdate=1;A.matrix.update(B,C===true?0:1);A.matrixUpdate=0}},onRemoveFromMany:function(A,B){if(!A.matrixUpdate){A.matrixUpdate=1;A.matrix.update(B,-1);A.matrixUpdate=0}},read:function(E,D,C,G){var B=this,A=B.inverse.role,F=B.callParent([E,D,C,G]);if(F.getReadRoot()){E[B.getterName](null,null,F.getRecords())}},onMatrixUpdate:function(F,G,E){var A=F.store,C,D,B;if(A&&!A.loading&&!A.matrixUpdate){A.matrixUpdate=1;C=A.indexOfId(G);if(E<0){if(C>=0){A.remove([C])}}else{if(C<0){B=A.getSession().getEntry(this.type,G);D=B&&B.record;if(D){A.add(D)}}}A.matrixUpdate=0}}},function(){var A=this;Ext.ClassManager.onCreated(function(){Ext.data.schema.ManyToMany.prototype.Right=Ext.define(null,{extend:A,left:false,side:"right"})},null,"Ext.data.schema.ManyToMany")})});
Ext.define("Ext.data.schema.Role",{isRole:true,left:true,owner:false,side:"left",isMany:false,defaultReaderType:"json",constructor:function(B,D){var C=this,A=D.extra;Ext.apply(C,D);if(A){delete A.type;Ext.apply(C,A);delete C.extra}C.association=B;if(B.owner===C.side){B.owner=C;C.owner=true}},processUpdate:function(){Ext.Error.raise('Only the "many" for an association may be processed. "'+this.role+'" is not valid.')},validateAssociationRecords:function(A,C,B){return B},createAssociationStore:function(G,H,D,L){var J=this,I=J.association,E=I.getFieldName(),F=I.isManyToMany,C=J.storeConfig,M=H.getId(),A={model:J.cls,data:D,role:J,session:G,associatedEntity:H,disableMetaChangeEvent:true,pageSize:null,remoteFilter:true,trackRemoved:!G},B,K;if(F){A.filters=[{property:J.inverse.field,value:M,exactMatch:true}]}else{if(E){A.filters=[{property:E,value:M,exactMatch:true}];A.foreignKeyName=E}}if(C){Ext.apply(A,C)}K=Ext.Factory.store(A);if(D){K.complete=!!L}if(F){if(G){B=G.getMatrixSlice(J.inverse,M);B.attach(K);B.notify=J.onMatrixUpdate;B.scope=J}}if(E||(F&&G)){K.on({add:"onAddToMany",remove:"onRemoveFromMany",clear:"onRemoveFromMany",scope:J});if(D){J.onAddToMany(K,K.getData().items,true)}}return K},getAssociatedStore:function(B,O,H,E,P){var G=this,C=G.storeName||G.getStoreName(),I=B[C],L=O&&O.reload,N=B.$source,J=B.session,K,F,A,D,M,Q;if(!I){if(!E&&N){N=N[C];if(N&&!N.isLoading()){Q=N;E=[];D=N.getData().items;for(F=0,A=D.length;F<A;++F){M=D[F];E.push(J.getRecord(M.self,M.id))}P=true}}I=G.createAssociationStore(J,B,E,P);I.$source=Q;if(!E&&(G.autoLoad||O)){L=true}B[C]=I}if(O){if(L||I.isLoading()){I.on("load",function(S,T,R,U){K=[S,U];H=H||O.scope||B;if(R){Ext.callback(O.success,H,K)}else{Ext.callback(O.failure,H,K)}K.push(R);Ext.callback(O,H,K);Ext.callback(O.callback,H,K)},null,{single:true})}else{K=[I,null];H=H||O.scope||B;Ext.callback(O.success,H,K);K.push(true);Ext.callback(O,H,K);Ext.callback(O.callback,H,K)}}if(L&&!I.isLoading()){I.load()}return I},getAssociatedItem:function(A){var B=this.isMany?this.getStoreName():this.role;return A[B]||null},getReaderRoot:function(){var A=this;return A.associationKey||(A.associationKey=A.association.schema.getNamer().readerRoot(A.role))},getReader:function(){var D=this,E=D.reader,A=D.cls,B=!D.associationKey,C=this.getReaderRoot();if(E){if(Ext.isString(E)){E={type:E,rootProperty:C,useSimpleAccessors:B}}if(E.isReader){E.setModel(A);E.setRootProperty(C);E.setUseSimpleAccessors(B)}else{Ext.applyIf(E,{model:A,rootProperty:C,useSimpleAccessors:B,type:D.defaultReaderType})}E=D.reader=Ext.createByAlias("reader."+E.type,E)}return E},getStoreName:function(){var A=this;return A.storeName||(A.storeName=A.association.schema.getNamer().storeName(A.role))},constructReader:function(E){var B=this,G=B.getReader(),A=B.cls,C=!B.associationKey,F=B.getReaderRoot(),D;if(!G){D=A.getProxy();if(D){G=D.getReader();B.savedRoot=G.getRootProperty();G.setRootProperty(F)}else{G=new E.self({model:A,useSimpleAccessors:C,rootProperty:F})}}return G},read:function(H,C,B,D){var F=this,G=this.constructReader(B),A=G.read(C,D),E=F.savedRoot;if(E!==undefined){G.setRootProperty(E);delete F.savedRoot}return A},getCallbackOptions:function(A,B,C){if(typeof A==="function"){A={callback:A,scope:B||C}}else{if(A){A=Ext.apply({},A);A.scope=B||A.scope||C}}return A},doGetFK:function(H,J,C){var L=this,E=L.cls,G=L.association.getFieldName(),M=L.role,D=H[M],F=J&&J.reload,A=D!==undefined&&!F,I=H.session,K,B;if(!A){if(I){K=H.get(G);if(K||K===0){A=I.peekRecord(E,K,true)&&!F;D=I.getRecord(E,K,false)}else{A=true;H[M]=D=null}}else{if(G){K=H.get(G);if(!K&&K!==0){A=true;H[M]=D=null}else{if(!D){D=E.createWithId(K)}}}else{A=true}}}else{if(D){A=!D.isLoading()}}if(A){if(J){B=[D,null];C=C||J.scope||H;Ext.callback(J.success,C,B);B.push(true);Ext.callback(J,C,B);Ext.callback(J.callback,C,B)}}else{H[M]=D;J=L.getCallbackOptions(J,C,H);D.load(J)}return D},doSetFK:function(D,B,F,A){var I=this,C=I.association.getFieldName(),K=I.role,L=D[K],J=I.inverse,G=J.setterName,E=D.session,H;if(B&&B.isEntity){if(L!==B){D[K]=B;if(C){D.set(C,B.getId())}if(G){B[G](D)}}}else{if(!C){Ext.Error.raise('No foreignKey specified for "'+I.association.left.role+'" by '+D.$className)}H=(D.changingKey&&!J.isMany)||D.set(C,B);if(H&&L&&L.isEntity&&!L.isEqual(L.getId(),B)){L[J.role]=D[K]=undefined}}if(F){if(Ext.isFunction(F)){F={callback:F,scope:A||D}}return D.save(F)}}});
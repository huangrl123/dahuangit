describe("Ext.data.amf.XmlDecoder",function(){var B=Ext.create("Ext.data.amf.XmlDecoder");var D;beforeEach(function(){B.clear()});var C=function(E){return Ext.data.amf.XmlDecoder.readXml(E).firstChild};var A=function(E){return B.readValue(C(E))};describe("clear",function(){it("should reset all the reference tables when called",function(){var E=A("<object><traits><string>a</string></traits><string>hello</string></object>");expect(B.objectReferences).not.toEqual([]);expect(B.traitsReferences).not.toEqual([]);expect(B.stringReferences).not.toEqual([]);B.clear();expect(B.objectReferences).toEqual([]);expect(B.traitsReferences).toEqual([]);expect(B.stringReferences).toEqual([])})});describe("AMFX",function(){describe("data types",function(){describe("null",function(){it("should decode null",function(){D=A("<null />");expect(D).toEqual(null)})});describe("false",function(){it("should decode false",function(){D=A("<false />");expect(D).toEqual(false)})});describe("true",function(){it("should decode true",function(){D=A("<true />");expect(D).toEqual(true)})});describe("integer",function(){it("should decode 0",function(){D=A("<int>0</int>");expect(D).toEqual(0)});it("should decode 2^29-1 (the largest possible unsigned 29-bit int)",function(){D=A("<int>536870911</int>");expect(D).toEqual(Math.pow(2,29)-1)})});describe("double",function(){it("should decode 10.333",function(){D=A("<double>10.333</double>");expect(D).toEqual(10.333)});it("should decode 1.7976931348623157e+308 (largest positive number)",function(){D=A("<double>1.7976931348623157e+308</double>");expect(D).toEqual(Number.MAX_VALUE)});it("should decode -1.7976931348623157e+308 (largest negative number)",function(){D=A("<double>-1.7976931348623157e+308</double>");expect(D).toEqual(-Number.MAX_VALUE)});it("should decode 5e-324 (smallest positive number)",function(){D=A("<double>5e-324</double>");expect(D).toEqual(Number.MIN_VALUE)});it("should decode -5e-324 (smallest negative number)",function(){D=A("<double>-5e-324</double>");expect(D).toEqual(-Number.MIN_VALUE)});it("should decode subnormal 2.2250738585072014E-308",function(){D=A("<double>2.2250738585072014e-308</double>");expect(D).toEqual(2.2250738585072e-308)});it("should decode NaN",function(){D=A("<double>NaN</double>");expect(isNaN(D)).toEqual(true)});it("should decode positive infinity",function(){D=A("<double>Infinity</double>");expect(D).toEqual(Infinity)});it("should decode negative infinity",function(){D=A("<double>-Infinity</double>");expect(D).toEqual(-Infinity)})});describe("string",function(){it("should decode an empty string",function(){D=A("<string />");expect(D).toEqual("")});it("should decode Danish",function(){var E="Quizdeltagerne spiste jordbær med fløde, mens cirkusklovnen Wolther spillede på xylofon";D=A("<string>Quizdeltagerne spiste jordbær med fløde, mens cirkusklovnen Wolther spillede på xylofon</string>");expect(D).toEqual(E)});it("should decode Hebrew",function(){var E="דג סקרן שט בים מאוכזב ולפתע מצא לו חברה איך הקליטה";D=A("<string>דג סקרן שט בים מאוכזב ולפתע מצא לו חברה איך הקליטה</string>");expect(D).toEqual(E)})});describe("xml document",function(){it("should decode an XMLDocument",function(){var F='<xml><![CDATA[<root><parent><child id="c1">foo</child><child id="c2"><bar/></child></parent></root>]]></xml>';var G=['<root><parent><child id="c1">foo</child><child id="c2"><bar/></child></parent></root>','<root><parent><child id="c1">foo</child><child id="c2"><bar/></child></parent></root>','<root><parent><child id="c1">foo</child><child id="c2"><bar /></child></parent></root>','<?xml version="1.0"?><root><parent><child id="c1">foo</child><child id="c2"><bar/></child></parent></root>'];var E=Ext.create("Ext.data.amf.XmlEncoder");D=E.convertXmlToString(A(F));expect(G).toContain(Ext.String.trim(D))})});describe("date",function(){it("should decode 7/24/2012",function(){D=A("<date>1343164970869</date>");expect(D).toEqual(new Date(1343164970869))});it("should decode 7/24/1912 (100 years before previous test's date)",function(){D=A("<date>-1812595029131</date>");expect(D).toEqual(new Date(-1812595029131))});it("should decode the UNIX epoch",function(){D=A("<date>0</date>");expect(D).toEqual(new Date(0))})});describe("array",function(){it("should decode an empty array",function(){D=A('<array length="0"></array>');expect(D).toEqual([])});it("should decode an array",function(){D=A('<array length="3"><string>a</string><string>b</string><string>c</string></array>');expect(D).toEqual(["a","b","c"])});it("should decode an array with associative data",function(){var E=["a"];E.b=1;D=A('<array length="1" ecma="true"><string>a</string><item name="b"><int>1</int></item></array>');expect(D).toEqual(E);expect(D.b).toEqual(E.b)})});describe("object",function(){it("should decode an empty anonymous object",function(){D=A("<object><traits /></object>");expect(D).toEqual({})});it("should decode an anonymous object with data items",function(){D=A("<object><traits><string>1</string><string>str</string></traits><int>1</int><string>string</string></object>");expect(D).toEqual({1:1,"str":"string"})})});describe("byte-array",function(){it("should decode a byte array",function(){D=A("<bytearray>090701060361060362060363</bytearray>");expect(D).toEqual(["a","b","c"])})});describe("reference tables",function(){it("should correctly read reference-table objects, arrays and traits",function(){D=A('<array length="5">                                 <string>a</string>                                 <object>                                 <traits>                                 <string id="0" />                                 </traits>                                 <int>1</int>                                 </object>                                 <string id="0" />                                 <ref id="1" />                                 <object><traits id="0"/><int>2</int></object>                                 </array>                                 ');expect(D).toEqual(["a",{a:1},"a",{a:1},{a:2}])})})});describe("AMFX messages",function(){it("should read an AMFX message",function(){D=B.readAmfxMessage('<amfx ver="3"><body targetURI="/onResult" responseURI=""><object type="flex.messaging.messages.AcknowledgeMessage"><traits><string>timestamp</string><string>headers</string><string>body</string><string>correlationId</string><string>messageId</string><string>timeToLive</string><string>clientId</string><string>destination</string></traits><double>1.354577842341E12</double><object><traits/></object><int>12345</int><string>00000002-C28A-C38A-984B-6321901916D7</string><string>FD04F220-6409-515E-8D77-F198A071B85E</string><double>0.0</double><string>274FBBCE-2179-FC6D-393A-62A933E67F8B</string><null/></object></body></amfx>');expect(D.targetURI).toEqual("/onResult");expect(D.responseURI).toEqual("");expect(D.message.headers).toEqual({});expect(D.message.body).toEqual(12345);expect(D.message.correlationId).toEqual("00000002-C28A-C38A-984B-6321901916D7")})})})});
Ext.define("Ext.data.StoreManager",{extend:"Ext.util.MixedCollection",alternateClassName:["Ext.StoreMgr","Ext.data.StoreMgr","Ext.StoreManager"],singleton:true,requires:["Ext.data.ArrayStore"],register:function(){for(var A=0,B;(B=arguments[A]);A++){this.add(B)}},unregister:function(){for(var A=0,B;(B=arguments[A]);A++){this.remove(this.lookup(B))}},lookup:function(A){if(Ext.isArray(A)){var F=["field1"],D=!Ext.isArray(A[0]),C=A,B,E;if(D){C=[];for(B=0,E=A.length;B<E;++B){C.push([A[B]])}}else{for(B=2,E=A[0].length;B<=E;++B){F.push("field"+B)}}return new Ext.data.ArrayStore({data:C,fields:F,autoDestroy:true,autoCreated:true,expanded:D})}if(Ext.isString(A)){return this.get(A)}else{return Ext.Factory.store(A)}},getKey:function(A){return A.storeId}},function(){Ext.regStore=function(D,C){var B;if(Ext.isObject(D)){C=D}else{if(Ext.data.StoreManager.containsKey(D)){return Ext.data.StoreManager.lookup(D)}C.storeId=D}if(C instanceof Ext.data.Store){B=C}else{B=new Ext.data.Store(C)}Ext.data.StoreManager.register(B);return B};Ext.getStore=function(B){return Ext.data.StoreManager.lookup(B)};var A=Ext.regStore("ext-empty-store",{proxy:"memory",useModelWarning:false});A.isEmptyStore=true;A.add=A.remove=A.insert=function(){Ext.Error.raise("Cannot modify ext-empty-store")}});
describe("Ext.data.amf.XmlEncoder",function(){describe("clear",function(){it("should reset body when called",function(){var A=Ext.create("Ext.data.amf.XmlEncoder");A.writeObject(1);expect(A.getBody().length).not.toEqual(0);A.clear();expect(A.getBody().length).toEqual(0)})});describe("AMFX",function(){var B=Ext.create("Ext.data.amf.XmlEncoder");var A=Ext.create("Ext.data.amf.XmlEncoder");beforeEach(function(){B.clear();A.clear()});describe("data types",function(){describe("undefined",function(){it("should encode undefined",function(){B.writeObject(undefined);expect(B.getBody()).toEqual("<null />")})});describe("null",function(){it("should encode null",function(){B.writeObject(null);expect(B.getBody()).toEqual("<null />")})});describe("false",function(){it("should encode false",function(){B.writeObject(false);expect(B.getBody()).toEqual("<false />")})});describe("true",function(){it("should encode true",function(){B.writeObject(true);expect(B.getBody()).toEqual("<true />")})});describe("integer",function(){it("should encode 0",function(){B.writeObject(0);expect(B.getBody()).toEqual("<int>0</int>")});it("should encode 2^29-1 (the largest possible unsigned 29-bit int)",function(){B.writeObject(Math.pow(2,29)-1);expect(B.getBody()).toEqual("<int>536870911</int>")});it("should treat Number with integer value as integer",function(){var E=[0,127,128,137,8526,16320,16512,16576,32704,2097088,4227328,270532928,Math.pow(2,29)-1];for(var C in E){B.clear();A.clear();var D=new Number(E[C]);B.writeObject(E[C]);A.writeObject(D);expect(B.getBody()).toEqual(A.getBody())}})});describe("double",function(){it("should encode 10.333",function(){B.writeObject(10.333);expect(B.getBody()).toEqual("<double>10.333</double>")});it("should encode 1.7976931348623157e+308 (largest positive number)",function(){B.writeObject(Number.MAX_VALUE);expect(B.getBody()).toEqual("<double>1.7976931348623157e+308</double>")});it("should encode -1.7976931348623157e+308 (largest negative number)",function(){B.writeObject(-Number.MAX_VALUE);expect(B.getBody()).toEqual("<double>-1.7976931348623157e+308</double>")});it("should encode 5e-324 (smallest positive number)",function(){B.writeObject(Number.MIN_VALUE);expect(B.getBody()).toEqual("<double>5e-324</double>")});it("should encode -5e-324 (smallest negative number)",function(){B.writeObject(-Number.MIN_VALUE);expect(B.getBody()).toEqual("<double>-5e-324</double>")});it("should encode subnormal 2.2250738585072014E-308",function(){B.writeObject(2.2250738585072e-308);expect(B.getBody()).toEqual("<double>2.2250738585072014e-308</double>")});it("should encode NaN",function(){B.writeObject(NaN);expect(B.getBody()).toEqual("<double>NaN</double>")});it("should encode positive infinity",function(){B.writeObject(Infinity);expect(B.getBody()).toEqual("<double>Infinity</double>")});it("should encode negative infinity",function(){B.writeObject(-Infinity);expect(B.getBody()).toEqual("<double>-Infinity</double>")})});describe("string",function(){it("should encode an empty string",function(){var C="";B.writeObject(C);expect(B.getBody()).toEqual("<string />")});it("should encode Danish",function(){var C="Quizdeltagerne spiste jordbær med fløde, mens cirkusklovnen Wolther spillede på xylofon";B.writeObject(C);expect(B.getBody()).toEqual("<string>Quizdeltagerne spiste jordbær med fløde, mens cirkusklovnen Wolther spillede på xylofon</string>")});it("should encode Hebrew",function(){var C="דג סקרן שט בים מאוכזב ולפתע מצא לו חברה איך הקליטה";B.writeObject(C);expect(B.getBody()).toEqual("<string>דג סקרן שט בים מאוכזב ולפתע מצא לו חברה איך הקליטה</string>")})});describe("xml document",function(){it("should encode an XMLDocument",function(){var F;var E='<root><parent><child id="c1">foo</child><child id="c2"><bar/></child></parent></root>';var C=['<xml><![CDATA[<root><parent><child id="c1">foo</child><child id="c2"><bar/></child></parent></root>]]></xml>','<xml><![CDATA[<root><parent><child id="c1">foo</child><child id="c2"><bar/></child></parent></root>]]></xml>','<xml><![CDATA[<root><parent><child id="c1">foo</child><child id="c2"><bar /></child></parent></root>]]></xml>','<xml><![CDATA[<?xml version="1.0"?><root><parent><child id="c1">foo</child><child id="c2"><bar/></child></parent></root>]]></xml>'];var D;if(window.DOMParser){D=(new DOMParser()).parseFromString(E,"text/xml")}else{D=new ActiveXObject("Microsoft.XMLDOM");D.loadXML(E)}B.writeObject(D);F=B.getBody().replace(/[\r\n]/g,"");expect(C).toContain(F)})});describe("date",function(){it("should encode 7/24/2012",function(){B.writeObject(new Date(1343164970869));expect(B.getBody()).toEqual("<date>1343164970869</date>")});it("should encode 7/24/1912 (100 years before previous test's date)",function(){B.writeObject(new Date(-1812595029131));expect(B.getBody()).toEqual("<date>-1812595029131</date>")});it("should encode the UNIX epoch",function(){B.writeObject(new Date(0));expect(B.getBody()).toEqual("<date>0</date>")})});describe("array",function(){it("should encode an empty array",function(){B.writeObject([]);expect(B.getBody()).toEqual('<array length="0"></array>')});it("should encode an array",function(){B.writeObject(["a","b","c"]);expect(B.getBody()).toEqual('<array length="3"><string>a</string><string>b</string><string>c</string></array>')});it("should encode an array with associative data",function(){var C=["a"];C.b=1;B.writeObject(C);expect(B.getBody()).toEqual('<array length="1" ecma="true"><string>a</string><item name="b"><int>1</int></item></array>')})});describe("object",function(){it("should encode an empty anonymous object",function(){B.writeObject({});expect(B.getBody()).toEqual("<object><traits /></object>")});it("should encode an anonymous object with data items",function(){B.writeObject({1:1,"str":"string"});expect(B.getBody()).toEqual("<object><traits><string>1</string><string>str</string></traits><int>1</int><string>string</string></object>")})});describe("byte-array",function(){it("should encode a byte array",function(){B.writeByteArray([0,1,2,3,255]);expect(B.getBody()).toEqual("<bytearray>00010203FF</bytearray>")})})});describe("AMFX messages",function(){it("should write an AMFX message",function(){var C=Ext.create("Ext.data.amf.RemotingMessage",{body:1,clientId:"2",destination:"3",headers:{header:"value"},messageId:"id",operation:"method",timestamp:0,timeToLive:0});B.writeAmfxRemotingPacket(C);expect(B.getBody()).toEqual('<amfx ver="3" xmlns="http://www.macromedia.com/2005/amfx"><body><object type="flex.messaging.messages.RemotingMessage"><traits><string>body</string><string>clientId</string><string>destination</string><string>headers</string><string>messageId</string><string>operation</string><string>source</string><string>timestamp</string><string>timeToLive</string></traits><int>1</int><string>2</string><string>3</string><object><traits><string>header</string></traits><string>value</string></object><string>id</string><string>method</string><string /><int>0</int><int>0</int></object></body></amfx>')})})})});
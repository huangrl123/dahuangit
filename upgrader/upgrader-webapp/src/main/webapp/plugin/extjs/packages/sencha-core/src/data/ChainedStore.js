Ext.define("Ext.data.ChainedStore",{extend:"Ext.data.AbstractStore",alias:"store.chained",config:{source:null,remoteFilter:false,remoteSort:false},mixins:["Ext.data.LocalStore"],constructor:function(){this.callParent(arguments);this.getData().addObserver(this)},updateRemoteFilter:function(A){if(A){Ext.Error.raise("Remote filtering cannot be used with chained stores.")}},updateRemoteSort:function(A){if(A){Ext.Error.raise("Remote sorting cannot be used with chained stores.")}},add:function(){var A=this.getSource();return A.add.apply(A,arguments)},remove:function(){var A=this.getSource();return A.remove.apply(A,arguments)},getData:function(){var A=this,B=A.data;if(!B){A.data=B=A.constructDataCollection()}return B},applySource:function(A){if(A){A=Ext.data.StoreManager.lookup(A)}return A},updateSource:function(B,A){var C=this,D;if(A){A.removeObserver(C)}if(B){D=C.getData();D.setSource(B.getData());if(!C.isInitializing){C.fireEvent("refresh",C);C.fireEvent("datachanged",C)}B.addObserver(C)}},getModel:function(){return this.getSource().getModel()},getProxy:function(){return null},onCollectionAdd:function(C,E){var D=this,B=E.items,A=!E.next;if(D.ignoreCollectionAdd){return}D.fireEvent("add",D,B,E.at);if(A){D.fireEvent("datachanged",D)}},onCollectionItemChange:function(A,D){var B=D.item,C=D.modified;if(this.contains(B)){this.fireEvent("update",this,B,"edit",C)}},onCollectionRemove:function(C,E){var D=this,B=E.items,A=!E.next;if(D.ignoreCollectionRemove){return}D.fireEvent("remove",D,B,E.at,false);if(A){D.fireEvent("datachanged",D)}},onSourceBeforeLoad:function(){this.ignoreCollectionAdd=true;this.callObservers("BeforeLoad")},onSourceAfterLoad:function(){var A=this;A.ignoreCollectionAdd=false;A.fireEvent("datachanged",A);A.fireEvent("refresh",A);this.callObservers("AfterLoad")},onSourceBeforeClear:function(){this.ignoreCollectionRemove=true;this.callObservers("BeforeClear")},onSourceAfterClear:function(){this.ignoreCollectionRemove=false;this.callObservers("AfterClear")},onSourceBeforeRemoveAll:function(){this.ignoreCollectionRemove=true;this.callObservers("BeforeRemoveAll")},onSourceAfterRemoveAll:function(A,C){var B=this;B.ignoreCollectionRemove=false;if(!C){B.fireEvent("clear",B);B.fireEvent("datachanged",B)}this.callObservers("AfterRemoveAll",[C])},onSourceFilter:function(){var A=this;A.fireEvent("refresh",A);A.fireEvent("datachanged",A)},hasPendingLoad:function(){return false},isLoading:function(){return false},onDestroy:function(){var A=this,B=A.data;A.observers=null;A.setSource(null);if(B){B.destroy();A.data=null}}});
Ext.Assert={falsey:function(A,B){if(A){Ext.Error.raise(B||("Expected a falsey value but was "+A))}},falseyProp:function(A,B){Ext.Assert.truthy(A);var C=A[B];if(C){if(A.$className){B=A.$className+"#"+B}Ext.Error.raise("Expected a falsey value for "+B+" but was "+C)}},truthy:function(A,B){if(!A){Ext.Error.raise(B||("Expected a truthy value but was "+typeof A))}},truthyProp:function(A,B){Ext.Assert.truthy(A);var C=A[B];if(!C){if(A.$className){B=A.$className+"#"+B}Ext.Error.raise("Expected a truthy value for "+B+" but was "+typeof C)}}};(function(){function A(H,I){var G=Ext[H],J;return function(K,L){if(!G(K)){Ext.Error.raise(L||J||(J="Expected value to be "+I))}}}function F(H,I){var G=Ext[H],J;return function(K,L){Ext.Assert.truthy(K);if(!G(K[L])){Ext.Error.raise(J||(J="Expected "+(K.$className?K.$className+"#":"")+L+" to be "+I))}}}function D(H,I){var G=Ext[H],J;return function(K,L){if(G(K)){Ext.Error.raise(L||J||(J="Expected value to NOT be "+I))}}}function B(H,I){var G=Ext[H],J;return function(K,L){Ext.Assert.truthy(K);if(G(K[L])){Ext.Error.raise(J||(J="Expected "+(K.$className?K.$className+"#":"")+L+" to NOT be "+I))}}}for(var E in Ext){if(E.substring(0,2)=="is"&&Ext.isFunction(Ext[E])){var C=E.substring(2);Ext.Assert[E]=A(E,C);Ext.Assert[E+"Prop"]=F(E,C);Ext.Assert["isNot"+C]=D(E,C);Ext.Assert["isNot"+C+"Prop"]=B(E,C)}}}());
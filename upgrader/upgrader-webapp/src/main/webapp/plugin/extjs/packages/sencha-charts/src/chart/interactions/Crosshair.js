Ext.define("Ext.chart.interactions.Crosshair",{extend:"Ext.chart.interactions.Abstract",requires:["Ext.chart.grid.HorizontalGrid","Ext.chart.grid.VerticalGrid","Ext.chart.CartesianChart","Ext.chart.axis.layout.Discrete"],type:"crosshair",alias:"interaction.crosshair",config:{axes:{top:{label:{},rect:{}},right:{label:{},rect:{}},bottom:{label:{},rect:{}},left:{label:{},rect:{}}},lines:{horizontal:{strokeStyle:"black",lineDash:[5,5]},vertical:{strokeStyle:"black",lineDash:[5,5]}},gesture:"drag"},applyAxes:function(B,A){return Ext.merge(A||{},B)},applyLines:function(A,B){return Ext.merge(B||{},A)},updateChart:function(A){if(!(A instanceof Ext.chart.CartesianChart)){throw"Crosshair interaction can only be used on cartesian charts."}this.callParent(arguments)},getGestures:function(){var A=this,B={};B[A.getGesture()]="onGesture";B[A.getGesture()+"start"]="onGestureStart";B[A.getGesture()+"end"]="onGestureEnd";return B},onGestureStart:function(M){var G=this,c=G.getChart(),N=c.getSurface("overlay"),J=c.getInnerRect(),Y=J[2],X=J[3],D=c.getEventXY(M),a=D[0],b=D[1],Z=c.getAxes(),S=G.getAxes(),I=G.getLines(),P,F,R,V,T,U,W,K,E,Q,A,L,C,H,O,B;if(a>0&&a<Y&&b>0&&b<X){G.lockEvents(G.getGesture());G.horizontalLine=N.add(Ext.apply({xclass:"Ext.chart.grid.HorizontalGrid",x:0,y:b,width:Y},I.horizontal));G.verticalLine=N.add(Ext.apply({xclass:"Ext.chart.grid.VerticalGrid",x:a,y:0,height:X},I.vertical));G.axesLabels=G.axesLabels||{};for(B=0;B<Z.length;B++){P=Z[B];F=P.getSurface();R=F.getRect();A=P.getSprites()[0];V=R[2];T=R[3];U=P.getPosition();L=A.attr;C=A.thickness;H=L.axisLine?L.lineWidth:0;O=H/2;Q=Math.max(L.majorTickSize,L.minorTickSize)+H;W=G.axesLabels[U]=F.add({type:"composite"});W.labelRect=W.add(Ext.apply({type:"rect",fillStyle:"white",x:U==="right"?H:F.roundPixel(V-C-Q)-O,y:U==="bottom"?H:F.roundPixel(T-C-Q)-H,width:U==="left"?C-O+Q:C+Q,height:U==="top"?C+Q:C+Q},S.rect||S[U].rect));K=Ext.apply({},P.config.label,P.labelDefaults);E=S.label||S[U].label;W.labelText=W.add(Ext.apply(K,E,{type:"text",x:(function(){switch(U){case"left":return V-Q-O-C/2;case"right":return C/2+Q-O;default:return 0}})(),y:(function(){switch(U){case"top":return T-Q-O-C/2;case"bottom":return C/2+Q;default:return 0}})()}))}return false}},onGesture:function(Q){var I=this;if(I.getLocks()[I.getGesture()]!==I){return}var h=I.getChart(),R=h.getSurface("overlay"),N=Ext.Array.slice(h.getInnerRect()),B=h.getInnerPadding(),c=B.left,K=B.top,b=N[2],Z=N[3],D=h.getEventXY(Q),d=D[0],f=D[1],g=h.getAxes(),S,W,F,H,A,U,M,J,Y,C,L,V,E,O,X,a,T,P,G;if(d<0){d=0}else{if(d>b){d=b}}if(f<0){f=0}else{if(f>Z){f=Z}}d+=c;f+=K;for(G=0;G<g.length;G++){S=g[G];W=S.getPosition();F=S.getAlignment();H=S.getSurface();A=S.getSprites()[0];U=A.attr.matrix;L=A.attr.textPadding*2;Y=I.axesLabels[W];M=A.getLayoutContext();J=S.getSegmenter();if(Y){if(F==="vertical"){E=U.getYY();X=U.getDY();T=(f-X-K)/E;if(S.getLayout() instanceof Ext.chart.axis.layout.Discrete){f=Math.round(T)*E+X+K;T=J.from(Math.round(T));T=A.attr.data[T]}else{T=J.from(T)}P=J.renderer(T,M);Y.setAttributes({translationY:f-K});Y.labelText.setAttributes({text:P});C=Y.labelText.getBBox();Y.labelRect.setAttributes({height:C.height+L,y:-(C.height+L)/2});H.renderFrame()}else{V=U.getXX();O=U.getDX();a=(d-O-c)/V;if(S.getLayout() instanceof Ext.chart.axis.layout.Discrete){d=Math.round(a)*V+O+c;a=J.from(Math.round(a));a=A.attr.data[a]}else{a=J.from(a)}P=J.renderer(a,M);Y.setAttributes({translationX:d-c});Y.labelText.setAttributes({text:P});C=Y.labelText.getBBox();Y.labelRect.setAttributes({width:C.width+L,x:-(C.width+L)/2});H.renderFrame()}}}I.horizontalLine.setAttributes({y:f});I.verticalLine.setAttributes({x:d});R.renderFrame();return false},onGestureEnd:function(C){var J=this,F=J.getChart(),G=F.getSurface("overlay"),I=F.getAxes(),B,A,E,D,H;G.remove(J.verticalLine);G.remove(J.horizontalLine);for(H=0;H<I.length;H++){B=I[H];A=B.getPosition();E=B.getSurface();D=J.axesLabels[A];if(D){delete J.axesLabels[A];E.remove(D)}E.renderFrame()}G.renderFrame();J.unlockEvents(J.getGesture())}});
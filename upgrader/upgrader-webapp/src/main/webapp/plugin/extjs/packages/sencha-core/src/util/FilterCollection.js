Ext.define("Ext.util.FilterCollection",{extend:"Ext.util.Collection",requires:["Ext.util.Filter"],isFilterCollection:true,$filterable:null,filterFn:null,constructor:function(A){var B=this;B.filterFn=Ext.util.Filter.createFilterFn(B);B.callParent([A]);B.setDecoder(B.decodeFilter)},filterData:function(A){return this.filtered?Ext.Array.filter(A,this.filterFn):A},getFilterFn:function(){return this.filterFn},isItemFiltered:function(A){return !this.filterFn(A)},decodeFilter:function(C){var B=this.getOptions(),A=B.getRootProperty(),D;if(C.isFilter){if(!C.getRoot()){C.setRoot(A)}}else{D={root:A};if(Ext.isFunction(C)){D.filterFn=C}else{if(!Ext.isObject(C)){Ext.Error.raise("Invalid filter specified: "+C)}D=Ext.apply(D,C);if(D.fn){D.filterFn=D.fn;delete D.fn}if(Ext.util.Filter.isInvalid(D)){return false}}C=new Ext.util.Filter(D)}return C},decodeRemoveItems:function(B,C){var M=this,O=(C===undefined)?B:B[C];if(!O.$cloned){if(B.length>C+1||!Ext.isIterable(O)){O=Ext.Array.slice(B,C)}var A=M.items,F=O.length,H=[],L,K,G,E,J,P,D,I,N;for(K=0;K<F;K++){L=O[K];if(L&&L.isFilter){H.push(L)}else{N=typeof L;G=N==="function";E=L.property!==undefined&&L.value!==undefined;J=N==="string";if(!G&&!E&&!J){Ext.Error.raise("Invalid filter specification: "+L)}for(I=A.length;I-->0;){P=A[I];D=false;if(J){D=P.getProperty()===L}else{if(G){D=P.getFilterFn()===L}else{if(E){D=P.getProperty()===L.property&&P.getValue()===L.value}}}if(D){H.push(P)}}}}O=H;O.$cloned=true}return O},getOptions:function(){return this.$filterable||this}});
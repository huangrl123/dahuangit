Ext.define("Ext.draw.SegmentTree",{config:{strategy:"double"},time:function(c,W,e,G,M,a,Y){var R=0,N,b,B=new Date(e[c.startIdx[0]]),d=new Date(e[c.endIdx[W-1]]),H=Ext.Date,T=[[H.MILLI,1,"ms1",null],[H.MILLI,2,"ms2","ms1"],[H.MILLI,5,"ms5","ms1"],[H.MILLI,10,"ms10","ms5"],[H.MILLI,50,"ms50","ms10"],[H.MILLI,100,"ms100","ms50"],[H.MILLI,500,"ms500","ms100"],[H.SECOND,1,"s1","ms500"],[H.SECOND,10,"s10","s1"],[H.SECOND,30,"s30","s10"],[H.MINUTE,1,"mi1","s10"],[H.MINUTE,5,"mi5","mi1"],[H.MINUTE,10,"mi10","mi5"],[H.MINUTE,30,"mi30","mi10"],[H.HOUR,1,"h1","mi30"],[H.HOUR,6,"h6","h1"],[H.HOUR,12,"h12","h6"],[H.DAY,1,"d1","h12"],[H.DAY,7,"d7","d1"],[H.MONTH,1,"mo1","d1"],[H.MONTH,3,"mo3","mo1"],[H.MONTH,6,"mo6","mo3"],[H.YEAR,1,"y1","mo3"],[H.YEAR,5,"y5","y1"],[H.YEAR,10,"y10","y5"],[H.YEAR,100,"y100","y10"]],A,Q,S=R,J=W,C=false,U=c.startIdx,K=c.endIdx,P=c.minIdx,F=c.maxIdx,L=c.open,X=c.close,O=c.minX,Z=c.minY,E=c.maxX,V=c.maxY,D,I;for(A=0;W>R+1&&A<T.length;A++){B=new Date(e[U[0]]);Q=T[A];B=H.align(B,Q[0],Q[1]);if(H.diff(B,d,Q[0])>e.length*2*Q[1]){continue}if(Q[3]&&c.map["time_"+Q[3]]){N=c.map["time_"+Q[3]][0];b=c.map["time_"+Q[3]][1]}else{N=S;b=J}R=W;I=B;C=true;U[W]=U[N];K[W]=K[N];P[W]=P[N];F[W]=F[N];L[W]=L[N];X[W]=X[N];O[W]=O[N];Z[W]=Z[N];E[W]=E[N];V[W]=V[N];I=Ext.Date.add(I,Q[0],Q[1]);for(D=N+1;D<b;D++){if(e[K[D]]<+I){K[W]=K[D];X[W]=X[D];if(V[D]>V[W]){V[W]=V[D];E[W]=E[D];F[W]=F[D]}if(Z[D]<Z[W]){Z[W]=Z[D];O[W]=O[D];P[W]=P[D]}}else{W++;U[W]=U[D];K[W]=K[D];P[W]=P[D];F[W]=F[D];L[W]=L[D];X[W]=X[D];O[W]=O[D];Z[W]=Z[D];E[W]=E[D];V[W]=V[D];I=Ext.Date.add(I,Q[0],Q[1])}}if(W>R){c.map["time_"+Q[2]]=[R,W]}}},"double":function(T,Q,U,E,K,R,P){var M=0,L,C=1,G,D,S,I,N,J,H,B,O,A,F;while(Q>M+1){L=M;M=Q;C+=C;for(G=L;G<M;G+=2){if(G===M-1){D=T.startIdx[G];S=T.endIdx[G];I=T.minIdx[G];N=T.maxIdx[G];J=T.open[G];H=T.close[G];B=T.minX[G];O=T.minY[G];A=T.maxX[G];F=T.maxY[G]}else{D=T.startIdx[G];S=T.endIdx[G+1];J=T.open[G];H=T.close[G];if(T.minY[G]<=T.minY[G+1]){I=T.minIdx[G];B=T.minX[G];O=T.minY[G]}else{I=T.minIdx[G+1];B=T.minX[G+1];O=T.minY[G+1]}if(T.maxY[G]>=T.maxY[G+1]){N=T.maxIdx[G];A=T.maxX[G];F=T.maxY[G]}else{N=T.maxIdx[G+1];A=T.maxX[G+1];F=T.maxY[G+1]}}T.startIdx[Q]=D;T.endIdx[Q]=S;T.minIdx[Q]=I;T.maxIdx[Q]=N;T.open[Q]=J;T.close[Q]=H;T.minX[Q]=B;T.minY[Q]=O;T.maxX[Q]=A;T.maxY[Q]=F;Q++}T.map["double_"+C]=[M,Q]}},none:Ext.emptyFn,aggregateData:function(K,E,B,O,N){var A=K.length,P=[],Q=[],H=[],L=[],R=[],D=[],M=[],C=[],J=[],G=[],I={startIdx:P,endIdx:Q,minIdx:H,maxIdx:L,open:R,minX:D,minY:M,maxX:C,maxY:J,close:G},F;for(F=0;F<A;F++){P[F]=F;Q[F]=F;H[F]=F;L[F]=F;R[F]=E[F];D[F]=K[F];M[F]=O[F];C[F]=K[F];J[F]=B[F];G[F]=N[F]}I.map={original:[0,A]};if(A){this[this.getStrategy()](I,A,K,E,B,O,N)}return I},binarySearchMin:function(E,G,B,A){var C=this.dataX;if(A<=C[E.startIdx[0]]){return G}if(A>=C[E.startIdx[B-1]]){return B-1}while(G+1<B){var D=(G+B)>>1,F=C[E.startIdx[D]];if(F===A){return D}else{if(F<A){G=D}else{B=D}}}return G},binarySearchMax:function(E,G,B,A){var C=this.dataX;if(A<=C[E.endIdx[0]]){return G}if(A>=C[E.endIdx[B-1]]){return B-1}while(G+1<B){var D=(G+B)>>1,F=C[E.endIdx[D]];if(F===A){return D}else{if(F<A){G=D}else{B=D}}}return B},constructor:function(A){this.initConfig(A)},setData:function(E,D,B,A,C){if(!B){C=A=B=D}this.dataX=E;this.dataOpen=D;this.dataHigh=B;this.dataLow=A;this.dataClose=C;if(E.length===B.length&&E.length===A.length){this.cache=this.aggregateData(E,D,B,A,C)}},getAggregation:function(C,D,A){if(!this.cache){return null}var H=Infinity,M=this.dataX[this.dataX.length-1]-this.dataX[0],B=this.cache.map,E=B.original,L,G,F,J,I,K;for(L in B){G=B[L];F=G[1]-G[0]-1;J=M/F;if(A<=J&&J<H){E=G;H=J}}I=Math.max(this.binarySearchMin(this.cache,E[0],E[1],C),E[0]);K=Math.min(this.binarySearchMax(this.cache,E[0],E[1],D)+1,E[1]);return{data:this.cache,start:I,end:K}}});
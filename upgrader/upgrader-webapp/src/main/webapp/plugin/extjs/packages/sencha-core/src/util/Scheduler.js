Ext.define("Ext.util.Scheduler",{mixins:["Ext.mixin.Observable"],requires:["Ext.util.Collection"],busyCounter:0,lastBusyCounter:0,destroyed:false,firing:null,notifyIndex:-1,nextId:0,orderedItems:null,passes:0,scheduledCount:0,validIdRe:null,config:{cycleLimit:5,preSort:null,tickDelay:5},constructor:function(A){if(Ext.util.Scheduler.instances){Ext.util.Scheduler.instances.push(this)}else{Ext.util.Scheduler.instances=[this]}this.id=Ext.util.Scheduler.count=(Ext.util.Scheduler.count||0)+1;this.mixins.observable.constructor.call(this,A);this.items=new Ext.util.Collection()},destroy:function(){var B=this,A=B.timer;if(A){window.clearTimeout(A);B.timer=null}B.destroyed=true;B.items=B.orderedItems=null;B.destroy=Ext.emptyFn;Ext.Array.remove(Ext.util.Scheduler.instances,this)},add:function(B){var A=this,C=A.items;if(C===A.firing){A.items=C=C.clone()}B.id=B.id||++A.nextId;B.scheduler=A;C.add(B);if(!A.sortMap){A.orderedItems=null}},remove:function(B){var A=this,C=A.items;if(A.destroyed){return}if(A.sortMap){Ext.Error.raise("Items cannot be removed during sort")}if(C===A.firing){A.items=C=C.clone()}if(B.scheduled){A.unscheduleItem(B);B.scheduled=false}C.remove(B);A.orderedItems=null},sort:function(){var D=this,E=D.items,F={},B=D.getPreSort(),A,C;D.orderedItems=[];D.sortMap=F;D.sortStack=[];if(B){E.sortItems(B)}E=E.items;for(A=0;A<E.length;++A){C=E[A];if(!F[C.id]){D.sortItem(C)}}D.sortMap=null;D.sortStack=null},sortItem:function(E){var B=this,F=B.sortMap,D=B.orderedItems,A;if(!E.scheduler){B.add(E)}A=E.id;if(E.scheduler!==B){Ext.Error.raise("Item "+A+" belongs to another Scheduler")}B.sortStack.push(E);if(F[A]===0){for(var G=[],C=0;C<B.sortStack.length;++C){G[C]=B.sortStack[C].getFullName()}Ext.Error.raise("Dependency cycle detected: "+G.join("\n --> "))}if(!(A in F)){F[A]=0;if(!E.sort.$nullFn){E.sort()}F[A]=1;E.order=B.orderedItems.length;D.push(E)}B.sortStack.pop();return B},sortItems:function(C){var A=this,B=A.sortItem;if(C){if(C instanceof Array){Ext.each(C,B,A)}else{Ext.Object.eachValue(C,B,A)}}return A},applyPreSort:function(C){if(typeof C==="function"){return C}var A=C.split(","),G=[],B=A.length,F,D,E;for(D=0;D<B;++D){G[D]=1;E=A[D];if((F=E.charAt(0))==="-"){G[D]=-1}else{if(F!=="+"){F=0}}if(F){A[D]=E.substring(1)}}return function(M,I){var K=0,H,J,L,N;for(H=0;!K&&H<B;++H){J=A[H];L=M[J];N=I[J];K=G[H]*((L<N)?-1:((N<L)?1:0))}return K}},notify:function(){var F=this,B=F.timer,D=F.getCycleLimit(),A,E,H,G,C;if(B){window.clearTimeout(B);F.timer=null}if(F.firing){Ext.Error.raise("Notify cannot be called recursively")}while(F.scheduledCount){if(D){--D}else{F.firing=null;if(F.onCycleLimitExceeded){F.onCycleLimitExceeded()}break}++F.passes;if(!(C=F.orderedItems)){F.sort();C=F.orderedItems}G=C.length;if(G){F.firing=F.items;for(E=0;E<G;++E){H=C[E];if(H.scheduled){H.scheduled=false;--F.scheduledCount;F.notifyIndex=E;H.react();if(!F.scheduledCount){break}}}}}F.firing=null;F.notifyIndex=-1;if((A=F.busyCounter)!==F.lastBusyCounter){if(!(F.lastBusyCounter=A)){F.fireEvent("idle",F)}}},onTick:function(){this.timer=null;this.notify()},scheduleItem:function(B){var A=this;++A.scheduledCount;if(!A.timer&&!A.firing){A.scheduleTick()}},scheduleTick:function(){var A=this;if(!A.destroyed&&!A.timer){A.timer=Ext.Function.defer(A.onTick,A.getTickDelay(),A)}},unscheduleItem:function(A){if(this.scheduledCount){--this.scheduledCount}},adjustBusy:function(C){var B=this,A=B.busyCounter+C;B.busyCounter=A;if(A){if(!B.lastBusyCounter){B.lastBusyCounter=A;B.fireEvent("busy",B)}}else{if(B.lastBusyCounter&&!B.timer){B.scheduleTick()}}},isBusy:function(){return !this.isIdle()},isIdle:function(){return !(this.busyCounter+this.lastBusyCounter)},debugHooks:{$enabled:false,onCycleLimitExceeded:function(){Ext.Error.raise("Exceeded cycleLimit "+this.getCycleLimit())},scheduleItem:function(A){if(!A){Ext.Error.raise("scheduleItem: Invalid argument")}Ext.log("Schedule item: "+A.getFullName()+" - "+(this.scheduledCount+1));if(A.order<=this.notifyIndex){Ext.log.warn("Suboptimal order: "+A.order+" < "+this.notifyIndex)}this.callParent([A])},unscheduleItem:function(A){if(!this.scheduledCount){Ext.Error.raise("Invalid scheduleCount")}this.callParent([A]);Ext.log("Unschedule item: "+A.getFullName()+" - "+this.scheduledCount)}}});
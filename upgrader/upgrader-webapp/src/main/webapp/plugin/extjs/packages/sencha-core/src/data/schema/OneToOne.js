Ext.define("Ext.data.schema.OneToOne",{extend:"Ext.data.schema.Association",isOneToOne:true,isToOne:true,kind:"one-to-one",Left:Ext.define(null,{extend:"Ext.data.schema.Role",createGetter:function(){var A=this;return function(){return A.doGet(this)}},createSetter:function(){var A=this;return function(B){return A.doSet(this,B)}},doGet:function(B){var D=this.role,C=B[D],A=B.session;if(!C&&A){}return C},doSet:function(A,B){var E=this.role,C=A[E],D=this.inverse.setterName;if(C!==B){A[E]=B;if(D){B[D](A)}}return C},read:function(D,C,B,F){var A=this,E=A.callParent([D,C,B,F]),G=E.getRecords()[0];if(G){D[A.role]=G;G[A.inverse.role]=D}}}),Right:Ext.define(null,{extend:"Ext.data.schema.Role",left:false,side:"right",createGetter:function(){var A=this;return function(B,C){return A.doGetFK(this,B,C)}},createSetter:function(){var A=this;return function(D,C,B){return A.doSetFK(this,D,C,B)}},onValueChange:function(B,A,C){B.changingKey=true;this.doSetFK(B,C);B.changingKey=false},read:function(D,C,B,F){var A=this,E=A.callParent([D,C,B,F]),G=E.getRecords()[0];if(G){D[A.role]=G;G[A.inverse.role]=D}}})});
Ext.define("Ext.draw.sprite.Path",{extend:"Ext.draw.sprite.Sprite",requires:["Ext.draw.Draw","Ext.draw.Path"],alias:["sprite.path","Ext.draw.Sprite"],type:"path",statics:{debug:false},inheritableStatics:{def:{processors:{path:function(A,B){if(!(A instanceof Ext.draw.Path)){A=new Ext.draw.Path(A)}return A},debug:"default"},aliases:{d:"path"},dirtyTriggers:{path:"bbox"},updaters:{path:function(B){var A=B.path;if(!A||A.bindAttr!==B){A=new Ext.draw.Path();A.bindAttr=B;B.path=A}A.clear();this.updatePath(A,B);B.dirtyFlags.bbox=["path"]}}}},updatePlainBBox:function(A){if(this.attr.path){this.attr.path.getDimension(A)}},updateTransformedBBox:function(A){if(this.attr.path){this.attr.path.getDimensionWithTransform(this.attr.matrix,A)}},render:function(E,C){var D=this.attr.matrix,A=this.attr;if(!A.path||A.path.coords.length===0){return}D.toContext(C);C.appendPath(A.path);C.fillStroke(A);var B=this.statics().debug||A.debug;if(B){B.bbox&&this.renderBBox(E,C);B.xray&&this.renderXRay(E,C)}},renderBBox:function(C,B){var A=this.getBBox();B.beginPath();B.moveTo(A.x,A.y);B.lineTo(A.x+A.width,A.y);B.lineTo(A.x+A.width,A.y+A.height);B.lineTo(A.x,A.y+A.height);B.closePath();B.strokeStyle="red";B.strokeOpacity=1;B.lineWidth=0.5;B.stroke()},renderXRay:function(D,F){var C=this.attr,I=C.matrix,K=C.inverseMatrix,H=C.path,E=H.types,J=H.coords,B=H.types.length,A=2,G,L;I.toContext(F);F.beginPath();for(G=0,L=0;G<B;G++){switch(E[G]){case"M":F.moveTo(J[L]-A,J[L+1]-A);F.rect(J[L]-A,J[L+1]-A,A*2,A*2);L+=2;break;case"L":F.moveTo(J[L]-A,J[L+1]-A);F.rect(J[L]-A,J[L+1]-A,A*2,A*2);L+=2;break;case"C":F.moveTo(J[L]+A,J[L+1]);F.arc(J[L],J[L+1],A,0,Math.PI*2,true);L+=2;F.moveTo(J[L]+A,J[L+1]);F.arc(J[L],J[L+1],A,0,Math.PI*2,true);L+=2;F.moveTo(J[L]+A*2,J[L+1]);F.rect(J[L]-A,J[L+1]-A,A*2,A*2);L+=2;break;default:}}K.toContext(F);F.strokeStyle="black";F.strokeOpacity=1;F.lineWidth=1;F.stroke();I.toContext(F);F.beginPath();for(G=0,L=0;G<B;G++){switch(E[G]){case"M":F.moveTo(J[L],J[L+1]);L+=2;break;case"L":F.moveTo(J[L],J[L+1]);L+=2;break;case"C":F.lineTo(J[L],J[L+1]);L+=2;F.moveTo(J[L],J[L+1]);L+=2;F.lineTo(J[L],J[L+1]);L+=2;break;default:}}K.toContext(F);F.lineWidth=0.5;F.stroke()},updatePath:function(B,A){}});
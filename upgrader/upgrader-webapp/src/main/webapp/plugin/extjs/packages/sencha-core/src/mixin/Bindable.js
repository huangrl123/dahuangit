Ext.define("Ext.mixin.Bindable",{mixinId:"bindable",config:{bind:{$value:null,lazy:true},controller:null,defaultListenerScope:false,publishes:{$value:null,lazy:true,merge:function(B,A){return this.mergeSets(B,A)}},reference:null,session:{$value:null,lazy:true},twoWayBindable:{$value:null,lazy:true,merge:function(B,A){return this.mergeSets(B,A)}},viewModel:{$value:null,lazy:true}},defaultBindProperty:null,validRefRe:/^[a-z_][a-z0-9_]*$/i,initInheritedState:function(F){var C=this,B=C.getReference(),A=C.getController(),D=C.getConfig("viewModel",true),E=C.getConfig("session",true);if(A){F.defaultListenerScope=A}else{if(C.defaultListenerScope||C._defaultListenerScope){F.defaultListenerScope=C}}if(D){if(!D.isViewModel){D=C}F.viewModel=D}if(E){if(!E.isSession){E=C}F.session=E}if(B){C.referenceKey=(F.referencePath||"")+B;C.viewModelKey=(F.viewModelPath||"")+B}},lookupSession:function(B){var A=B?null:this.getSession();if(!A){A=this.getInheritedConfig("session",B);if(A&&!A.isSession){A=A.getInherited().session=A.getSession()}}return A||null},lookupViewModel:function(B){var A=B?null:this.getViewModel();if(!A){A=this.getInheritedConfig("viewModel",B);if(A&&!A.isViewModel){A=A.getInherited().viewModel=A.getViewModel()}}return A||null},publishState:function(B,F){var I=this,H=I.viewModelKey,G=I.publishedState,E=I.getBind(),C=E&&B&&E[B],J=0,K,D,A;if(C&&!C.syncing&&!C.isReadOnly()){C.setValue(F)}if(!H||!(D=I.getPublishes())){return}if(!(A=I.lookupViewModel())){return}if(B&&G){if(!D[B]){return}if(!(F&&F.constructor===Object)&&!(F instanceof Array)){if(G[B]===F){return}}H+=".";H+=B}else{G=G||(I.publishedState={});for(K in D){++J;if(K===B){G[K]=F}else{G[K]=I[K]}}if(!J){return}F=G}A.set(H,F)},privates:{addBindableUpdater:function(B){var A=this,E=A.self.$config.configs,D=E[B],C;if(D&&!A.hasOwnProperty(C=D.names.update)){A[C]=D.bindableUpdater||(D.root.bindableUpdater=A.makeBindableUpdater(D))}},applyBind:function(E,F){var A=this,B=A.lookupViewModel(),G=A.getTwoWayBindable(),H=A._getBindTemplateScope,I,C,D;if(!F||typeof F==="string"){F={}}if(!B){Ext.Error.raise("Cannot use bind config without a viewModel")}if(Ext.isString(E)){if(!A.defaultBindProperty){Ext.Error.raise(A.$className+" has no defaultBindProperty - Please specify a bind object")}I=E;E={};E[A.defaultBindProperty]=I}for(C in E){D=E[C];I=F[C];if(I&&typeof I!=="string"){I.destroy();I=null}if(D){I=B.bind(D,A.onBindNotify,A);I._config=Ext.Config.get(C);I.getTemplateScope=H;if(!A[I._config.names.set]){Ext.Error.raise("Cannot bind "+C+" on "+A.$className+" - missing a "+I._config.names.set+" method.")}}F[C]=I;if(G&&G[C]&&!I.isReadOnly()){A.addBindableUpdater(C)}}return F},applyController:function(A){A=Ext.Factory.controller(A);A.setView(this);return A},applyPublishes:function(A){if(this.lookupViewModel()){for(var B in A){this.addBindableUpdater(B)}}return A},applyReference:function(A){var B=this.validRefRe||Ext.validIdRe;if(A&&!B.test(A)){Ext.Error.raise('Invalid reference "'+A+'" for '+this.getId()+" - not a valid identifier")}return A},applySession:function(A){if(!A){return null}if(!A.isSession){var C=this.lookupSession(true),B=(A===true)?{}:A;if(C){A=C.spawn(B)}else{A=new Ext.data["Session"](B)}}return A},applyViewModel:function(D){var C=this,B,A;if(!(D&&D.isViewModel)){B={parent:C.lookupViewModel(true)};B.session=C.getSession();if(!A&&!B.parent){B.session=C.lookupSession()}if(D){if(D.constructor===Object){Ext.apply(B,D)}else{if(typeof D==="string"){B.type=D}}}D=Ext.Factory.viewModel(B)}return D},_getBindTemplateScope:function(){return this.scope.resolveListenerScope()},initBindable:function(){this.initBindable=Ext.emptyFn;this.getBind();this.getPublishes()},makeBindableUpdater:function(B){var A=B.names.update;return function(F,C){var D=this,E=D.self.prototype[A];if(E){E.call(D,F,C)}D.publishState(B.name,F)}},onBindNotify:function(C,A,B){B.syncing=(B.syncing+1)||1;this[B._config.names.set](C);--B.syncing},removeBindings:function(){var C=this.bind,A,B;if(C&&typeof C!=="string"){for(A in C){B=C[A];B.destroy();B._config=B.getTemplateScope=null}}this.bind=null},updateSession:function(A){var B=this.getInherited();if(A){B.session=A}else{delete B.session}},updateViewModel:function(B){var C=this.getInherited(),A=this.getController();if(B){C.viewModel=B;B.setView(this);if(A){A.initViewModel(B)}}else{delete C.viewModel}}}});
Ext.define("Ext.draw.Path",{requires:["Ext.draw.Draw","Ext.draw.Solver"],statics:{pathRe:/,?([achlmqrstvxz]),?/gi,pathRe2:/-/gi,pathSplitRe:/\s|,/g},svgString:"",constructor:function(B){var A=this;A.coords=[];A.types=[];A.cursor=null;A.startX=0;A.startY=0;A.solvers={};if(B){A.fromSvgString(B)}},clear:function(){var A=this;A.coords.length=0;A.types.length=0;A.cursor=null;A.startX=0;A.startY=0;A.solvers={};A.dirt()},dirt:function(){this.svgString=""},moveTo:function(B,C){var A=this;if(!A.cursor){A.cursor=[B,C]}A.coords.push(B,C);A.types.push("M");A.startX=B;A.startY=C;A.cursor[0]=B;A.cursor[1]=C;A.dirt()},lineTo:function(B,C){var A=this;if(!A.cursor){A.cursor=[B,C];A.coords.push(B,C);A.types.push("M")}else{A.coords.push(B,C);A.types.push("L")}A.cursor[0]=B;A.cursor[1]=C;A.dirt()},bezierCurveTo:function(B,D,E,G,C,F){var A=this;if(!A.cursor){A.moveTo(B,D)}A.coords.push(B,D,E,G,C,F);A.types.push("C");A.cursor[0]=C;A.cursor[1]=F;A.dirt()},quadraticCurveTo:function(E,A,C,D){var B=this;if(!B.cursor){B.moveTo(E,A)}B.bezierCurveTo((B.cursor[0]*2+E)/3,(B.cursor[1]*2+A)/3,(C*2+E)/3,(D*2+A)/3,C,D)},closePath:function(){var A=this;if(A.cursor){A.types.push("Z");A.dirt()}},arcTo:function(C,D,c,d,Z,Y,M){var I=this;if(Y===undefined){Y=Z}if(M===undefined){M=0}if(!I.cursor){I.moveTo(C,D);return}if(Z===0||Y===0){I.lineTo(C,D);return}c-=C;d-=D;var K=I.cursor[0]-C,L=I.cursor[1]-D,X=c*L-d*K,R,S,U,V,E,F,W=Math.sqrt(K*K+L*L),G=Math.sqrt(c*c+d*d),T,P,J;if(X===0){I.lineTo(C,D);return}if(Y!==Z){R=Math.cos(M);S=Math.sin(M);U=R/Z;V=S/Y;E=-S/Z;F=R/Y;var N=U*K+V*L;L=E*K+F*L;K=N;N=U*c+V*d;d=E*c+F*d;c=N}else{K/=Z;L/=Y;c/=Z;d/=Y}P=K*G+c*W;J=L*G+d*W;T=1/(Math.sin(Math.asin(Math.abs(X)/(W*G))*0.5)*Math.sqrt(P*P+J*J));P*=T;J*=T;var Q=(P*K+J*L)/(K*K+L*L),H=(P*c+J*d)/(c*c+d*d);var A=K*Q-P,b=L*Q-J,O=c*H-P,a=d*H-J,B=Math.atan2(b,A),e=Math.atan2(a,O);if(X>0){if(e<B){e+=Math.PI*2}}else{if(B<e){B+=Math.PI*2}}if(Y!==Z){P=R*P*Z-S*J*Y+C;J=S*J*Y+R*J*Y+D;I.lineTo(R*Z*A-S*Y*b+P,S*Z*A+R*Y*b+J);I.ellipse(P,J,Z,Y,M,B,e,X<0)}else{P=P*Z+C;J=J*Y+D;I.lineTo(Z*A+P,Y*b+J);I.ellipse(P,J,Z,Y,M,B,e,X<0)}},ellipse:function(H,G,F,E,N,O,B,J){var L=this,M=L.coords,C=M.length,D,K,A;if(B-O>=Math.PI*2){L.ellipse(H,G,F,E,N,O,O+Math.PI,J);L.ellipse(H,G,F,E,N,O+Math.PI,B,J);return}if(!J){if(B<O){B+=Math.PI*2}D=L.approximateArc(M,H,G,F,E,N,O,B)}else{if(O<B){O+=Math.PI*2}D=L.approximateArc(M,H,G,F,E,N,B,O);for(K=C,A=M.length-2;K<A;K+=2,A-=2){var I=M[K];M[K]=M[A];M[A]=I;I=M[K+1];M[K+1]=M[A+1];M[A+1]=I}}if(!L.cursor){L.cursor=[M[M.length-2],M[M.length-1]];L.types.push("M")}else{L.cursor[0]=M[M.length-2];L.cursor[1]=M[M.length-1];L.types.push("L")}for(K=2;K<D;K+=6){L.types.push("C")}L.dirt()},arc:function(D,E,F,C,B,A){this.ellipse(D,E,F,F,0,C,B,A)},rect:function(C,D,E,A){if(E==0||A==0){return}var B=this;B.moveTo(C,D);B.lineTo(C+E,D);B.lineTo(C+E,D+A);B.lineTo(C,D+A);B.closePath()},approximateArc:function(Y,C,P,W,E,N,M,H){var Z=Math.cos(N),c=Math.sin(N),F=Math.cos(M),L=Math.sin(M),R=Z*F*W-c*L*E,S=-Z*L*W-c*F*E,B=c*F*W+Z*L*E,D=-c*L*W+Z*F*E,T=Math.PI/2,Q=2,G=R,V=S,O=B,U=D,X=0.547443256150549,I,A,J,K,a,b;H-=M;if(H<0){H+=Math.PI*2}Y.push(R+C,B+P);while(H>=T){Y.push(G+V*X+C,O+U*X+P,G*X+V+C,O*X+U+P,V+C,U+P);Q+=6;H-=T;I=G;G=V;V=-I;I=O;O=U;U=-I}if(H){A=(0.329473805281599+0.0121208558413044*H)*H;J=Math.cos(H);K=Math.sin(H);a=J+A*K;b=K-A*J;Y.push(G+V*A+C,O+U*A+P,G*a+V*b+C,O*a+U*b+P,G*J+V*K+C,O*J+U*K+P);Q+=6}return Q},arcSvg:function(U,T,K,C,M,W,X){if(U<0){U=-U}if(T<0){T=-T}var H=this,D=H.cursor[0],E=H.cursor[1],O=(D-W)/2,P=(E-X)/2,V=Math.cos(K),Y=Math.sin(K),I=O*V+P*Y,J=-O*Y+P*V,L=I/U,N=J/T,S=L*L+N*N,F=(D+W)*0.5,Q=(E+X)*0.5,B=0,A=0;if(S>=1){S=Math.sqrt(S);U*=S;T*=S}else{S=Math.sqrt(1/S-1);if(C===M){S=-S}B=S*U*N;A=-S*T*L;F+=V*B-Y*A;Q+=Y*B+V*A}var G=Math.atan2((J-A)/T,(I-B)/U),R=Math.atan2((-J-A)/T,(-I-B)/U)-G;if(M){if(R<=0){R+=Math.PI*2}}else{if(R>=0){R-=Math.PI*2}}H.ellipse(F,Q,U,T,K,G,G+R,1-M)},fromSvgString:function(J){if(!J){return}var A=this,L,E={a:7,c:6,h:1,l:2,m:2,q:4,s:4,t:2,v:1,z:0,A:7,C:6,H:1,L:2,M:2,Q:4,S:4,T:2,V:1,Z:0},C="",F,H,G=0,B=0,I=false,K,D,M;if(Ext.isString(J)){L=J.replace(Ext.draw.Path.pathRe," $1 ").replace(Ext.draw.Path.pathRe2," -").split(Ext.draw.Path.pathSplitRe)}else{if(Ext.isArray(J)){L=J.join(",").split(Ext.draw.Path.pathSplitRe)}}for(K=0,D=0;K<L.length;K++){if(L[K]!==""){L[D++]=L[K]}}L.length=D;A.clear();for(K=0;K<L.length;){C=I;I=L[K];M=(I.toUpperCase()!==I);K++;switch(I){case"M":A.moveTo(G=+L[K],B=+L[K+1]);K+=2;while(K<D&&!E.hasOwnProperty(L[K])){A.lineTo(G=+L[K],B=+L[K+1]);K+=2}break;case"L":A.lineTo(G=+L[K],B=+L[K+1]);K+=2;while(K<D&&!E.hasOwnProperty(L[K])){A.lineTo(G=+L[K],B=+L[K+1]);K+=2}break;case"A":while(K<D&&!E.hasOwnProperty(L[K])){A.arcSvg(+L[K],+L[K+1],+L[K+2]*Math.PI/180,+L[K+3],+L[K+4],G=+L[K+5],B=+L[K+6]);K+=7}break;case"C":while(K<D&&!E.hasOwnProperty(L[K])){A.bezierCurveTo(+L[K],+L[K+1],F=+L[K+2],H=+L[K+3],G=+L[K+4],B=+L[K+5]);K+=6}break;case"Z":A.closePath();break;case"m":A.moveTo(G+=+L[K],B+=+L[K+1]);K+=2;while(K<D&&!E.hasOwnProperty(L[K])){A.lineTo(G+=+L[K],B+=+L[K+1]);K+=2}break;case"l":A.lineTo(G+=+L[K],B+=+L[K+1]);K+=2;while(K<D&&!E.hasOwnProperty(L[K])){A.lineTo(G+=+L[K],B+=+L[K+1]);K+=2}break;case"a":while(K<D&&!E.hasOwnProperty(L[K])){A.arcSvg(+L[K],+L[K+1],+L[K+2]*Math.PI/180,+L[K+3],+L[K+4],G+=+L[K+5],B+=+L[K+6]);K+=7}break;case"c":while(K<D&&!E.hasOwnProperty(L[K])){A.bezierCurveTo(G+(+L[K]),B+(+L[K+1]),F=G+(+L[K+2]),H=B+(+L[K+3]),G+=+L[K+4],B+=+L[K+5]);K+=6}break;case"z":A.closePath();break;case"s":if(!(C==="c"||C==="C"||C==="s"||C==="S")){F=G;H=B}while(K<D&&!E.hasOwnProperty(L[K])){A.bezierCurveTo(G+G-F,B+B-H,F=G+(+L[K]),H=B+(+L[K+1]),G+=+L[K+2],B+=+L[K+3]);K+=4}break;case"S":if(!(C==="c"||C==="C"||C==="s"||C==="S")){F=G;H=B}while(K<D&&!E.hasOwnProperty(L[K])){A.bezierCurveTo(G+G-F,B+B-H,F=+L[K],H=+L[K+1],G=(+L[K+2]),B=(+L[K+3]));K+=4}break;case"q":while(K<D&&!E.hasOwnProperty(L[K])){A.quadraticCurveTo(F=G+(+L[K]),H=B+(+L[K+1]),G+=+L[K+2],B+=+L[K+3]);K+=4}break;case"Q":while(K<D&&!E.hasOwnProperty(L[K])){A.quadraticCurveTo(F=+L[K],H=+L[K+1],G=+L[K+2],B=+L[K+3]);K+=4}break;case"t":if(!(C==="q"||C==="Q"||C==="t"||C==="T")){F=G;H=B}while(K<D&&!E.hasOwnProperty(L[K])){A.quadraticCurveTo(F=G+G-F,H=B+B-H,G+=+L[K+1],B+=+L[K+2]);K+=2}break;case"T":if(!(C==="q"||C==="Q"||C==="t"||C==="T")){F=G;H=B}while(K<D&&!E.hasOwnProperty(L[K])){A.quadraticCurveTo(F=G+G-F,H=B+B-H,G=(+L[K+1]),B=(+L[K+2]));K+=2}break;case"h":while(K<D&&!E.hasOwnProperty(L[K])){A.lineTo(G+=+L[K],B);K++}break;case"H":while(K<D&&!E.hasOwnProperty(L[K])){A.lineTo(G=+L[K],B);K++}break;case"v":while(K<D&&!E.hasOwnProperty(L[K])){A.lineTo(G,B+=+L[K]);K++}break;case"V":while(K<D&&!E.hasOwnProperty(L[K])){A.lineTo(G,B=+L[K]);K++}break}}},rayTestLine:function(E,F,A,B,C,D){var G;if(F===B){if(D===F){if(Math.min(E,A)<=C&&C<=Math.max(E,A)){return -1}}else{return 0}}if(F<D&&D<B||B<D&&D<F){G=(D-F)*(A-E)/(B-F)+E;if(G===C){return -1}else{if(G<C){return 0}else{return 1}}}else{return 0}},rayTestCubicBezier:function(C,D,F,G,I,J,A,B,M,N,E){if(Math.min(C,F,I,A)<=M&&M<=Math.max(C,F,I,A)){if(Math.min(D,G,J,B)<=N&&N<=Math.max(D,G,J,B)){var L=this,H=L.solvers[E]||(L.solvers[E]=Ext.draw.Solver.createBezierSolver(C,F,I,A)),K=H.solve(N);return(+(M<=K[0]&&0<=K[0]&&K[0]<=1))+(+(M<=K[1]&&0<=K[1]&&K[1]<=1))+(+(M<=K[2]&&0<=K[2]&&K[2]<=1))}}return 0},isPointInPath:function(K,L){var J=this,G,E,C=0,N=0,F=J.types,A=J.coords,D=F.length,B=null,I=null,H=0,M=0;for(G=0,E=0;G<D;G++){switch(F[G]){case"M":if(B!==null){N=J.rayTestLine(B,I,H,M,K,L);if(N<0){C+=1}else{C+=N}}B=H=A[E];I=M=A[E+1];E+=2;break;case"L":N=J.rayTestLine(H,M,A[E],A[E+1],K,L);if(N<0){return true}C+=N;H=A[E];M=A[E+1];E+=2;break;case"C":N=J.rayTestCubicBezier(H,M,A[E],A[E+1],A[E+2],A[E+3],A[E+4],A[E+5],K,L,G);if(N<0){return true}C+=N;H=A[E+4];M=A[E+5];E+=6;break;case"Z":break}}return C%2===1},clone:function(){var A=this,B=new Ext.draw.Path();B.coords=A.coords.slice(0);B.types=A.types.slice(0);B.cursor=A.cursor?A.cursor.slice(0):null;B.startX=A.startX;B.startY=A.startY;B.svgString=A.svgString;return B},transform:function(A){if(A.isIdentity()){return}var E=A.getXX(),F=A.getYX(),I=A.getDX(),C=A.getXY(),D=A.getYY(),G=A.getDY(),J=this.coords,H=0,B=J.length,L,K;for(;H<B;H+=2){L=J[H];K=J[H+1];J[H]=L*E+K*F+I;J[H+1]=L*C+K*D+G}this.dirt()},getDimension:function(E){if(!E){E={}}if(!this.types||!this.types.length){E.x=0;E.y=0;E.width=0;E.height=0;return E}E.left=Infinity;E.top=Infinity;E.right=-Infinity;E.bottom=-Infinity;var D=0,B=0,C=this.types,H=this.coords,A=C.length,F,G;for(;D<A;D++){switch(C[D]){case"M":case"L":F=H[B];G=H[B+1];E.left=Math.min(F,E.left);E.top=Math.min(G,E.top);E.right=Math.max(F,E.right);E.bottom=Math.max(G,E.bottom);B+=2;break;case"C":this.expandDimension(E,F,G,H[B],H[B+1],H[B+2],H[B+3],F=H[B+4],G=H[B+5]);B+=6;break}}E.x=E.left;E.y=E.top;E.width=E.right-E.left;E.height=E.bottom-E.top;return E},getDimensionWithTransform:function(B,L){if(!this.types||!this.types.length){if(!L){L={}}L.x=0;L.y=0;L.width=0;L.height=0;return L}L.left=Infinity;L.top=Infinity;L.right=-Infinity;L.bottom=-Infinity;var H=B.getXX(),I=B.getYX(),J=B.getDX(),E=B.getXY(),F=B.getYY(),K=B.getDY(),M=0,O=0,G=this.types,A=this.coords,D=G.length,C,N;for(;M<D;M++){switch(G[M]){case"M":case"L":C=A[O]*H+A[O+1]*I+J;N=A[O]*E+A[O+1]*F+K;L.left=Math.min(C,L.left);L.top=Math.min(N,L.top);L.right=Math.max(C,L.right);L.bottom=Math.max(N,L.bottom);O+=2;break;case"C":this.expandDimension(L,C,N,A[O]*H+A[O+1]*I+J,A[O]*E+A[O+1]*F+K,A[O+2]*H+A[O+3]*I+J,A[O+2]*E+A[O+3]*F+K,C=A[O+4]*H+A[O+5]*I+J,N=A[O+4]*E+A[O+5]*F+K);O+=6;break}}if(!L){L={}}L.x=L.left;L.y=L.top;L.width=L.right-L.left;L.height=L.bottom-L.top;return L},expandDimension:function(N,C,D,G,B,J,E,F,K){var A=this,L=N.left,H=N.right,M=N.top,O=N.bottom,I=A.dim||(A.dim=[]);A.curveDimension(C,G,J,F,I);L=Math.min(L,I[0]);H=Math.max(H,I[1]);A.curveDimension(D,B,E,K,I);M=Math.min(M,I[0]);O=Math.max(O,I[1]);N.left=L;N.right=H;N.top=M;N.bottom=O},curveDimension:function(K,H,I,M,G){var E=3*(-K+3*(H-I)+M),F=6*(K-2*H+I),A=-3*(K-H),L,J,B=Math.min(K,M),C=Math.max(K,M),D;if(E===0){if(F===0){G[0]=B;G[1]=C;return}else{L=-A/F;if(0<L&&L<1){J=this.interpolate(K,H,I,M,L);B=Math.min(B,J);C=Math.max(C,J)}}}else{D=F*F-4*E*A;if(D>=0){D=Math.sqrt(D);L=(D-F)/2/E;if(0<L&&L<1){J=this.interpolate(K,H,I,M,L);B=Math.min(B,J);C=Math.max(C,J)}if(D>0){L-=D/E;if(0<L&&L<1){J=this.interpolate(K,H,I,M,L);B=Math.min(B,J);C=Math.max(C,J)}}}}G[0]=B;G[1]=C},interpolate:function(F,C,D,A,E){if(E===0){return F}if(E===1){return A}var B=(1-E)/E;return E*E*E*(A+B*(3*D+B*(3*C+B*F)))},fromStripes:function(E){var D=this,A=0,F=E.length,G,C,B;D.clear();for(;A<F;A++){B=E[A];D.coords.push.apply(D.coords,B);D.types.push("M");for(G=2,C=B.length;G<C;G+=6){D.types.push("C")}}if(!D.cursor){D.cursor=[]}D.cursor[0]=D.coords[D.coords.length-2];D.cursor[1]=D.coords[D.coords.length-1];D.dirt()},toStripes:function(I){var N=I||[],G,J,K,M,F,L,H,A,D,E=this.types,B=this.coords,C=E.length;for(A=0,D=0;A<C;A++){switch(E[A]){case"M":G=[L=M=B[D++],H=F=B[D++]];N.push(G);break;case"L":J=B[D++];K=B[D++];G.push((M+M+J)/3,(F+F+K)/3,(M+J+J)/3,(F+K+K)/3,M=J,F=K);break;case"C":G.push(B[D++],B[D++],B[D++],B[D++],M=B[D++],F=B[D++]);break;case"Z":J=L;K=H;G.push((M+M+J)/3,(F+F+K)/3,(M+J+J)/3,(F+K+K)/3,M=J,F=K);break}}return N},updateSvgString:function(){var C=[],D=this.types,B=this.coords,E=D.length,A=0,F=0;for(;A<E;A++){switch(D[A]){case"M":C.push("M"+B[F]+","+B[F+1]);F+=2;break;case"L":C.push("L"+B[F]+","+B[F+1]);F+=2;break;case"C":C.push("C"+B[F]+","+B[F+1]+" "+B[F+2]+","+B[F+3]+" "+B[F+4]+","+B[F+5]);F+=6;break;case"Z":C.push("Z");break}}this.svgString=C.join("")},toString:function(){if(!this.svgString){this.updateSvgString()}return this.svgString}});
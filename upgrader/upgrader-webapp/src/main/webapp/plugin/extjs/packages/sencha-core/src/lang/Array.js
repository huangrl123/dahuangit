Ext.Array=new (function(){var N=Array.prototype,J=N.slice,R=(function(){var T=[],S,U=20;if(!T.splice){return false}while(U--){T.push("A")}T.splice(15,0,"F","F","F","F","F","F","F","F","F","F","F","F","F","F","F","F","F","F","F","F","F");S=T.length;T.splice(13,0,"XXX");if(S+1!==T.length){return false}return true}()),F="indexOf" in N,G=true;function B(T,X){var W=T.length,S=new Array(W),V=new Array(W),U;for(U=0;U<W;U++){S[U]=U}S.sort(function(Z,Y){return X(T[Z],T[Y])||(Z-Y)});for(U=0;U<W;U++){V[U]=T[S[U]]}for(U=0;U<W;U++){T[U]=V[U]}return T}try{if(typeof document!=="undefined"){J.call(document.getElementsByTagName("body"))}}catch(A){G=false}var H=function(S,T){return(T<0)?Math.max(0,S.length+T):Math.min(S.length,T)},I=function(S,T,V,b){var X=b?b.length:0,Y=S.length,c=H(S,T);if(c===Y){if(X){S.push.apply(S,b)}}else{var a=Math.min(V,Y-c),e=c+a,U=e+X-a,W=Y-e,Z=Y-a,d;if(U<e){for(d=0;d<W;++d){S[U+d]=S[e+d]}}else{if(U>e){for(d=W;d--;){S[U+d]=S[e+d]}}}if(X&&c===Z){S.length=Z;S.push.apply(S,b)}else{S.length=Z+X;for(d=0;d<X;++d){S[c+d]=b[d]}}}return S},E=function(S,U,V,T){if(T&&T.length){if(U===0&&!V){S.unshift.apply(S,T)}else{if(U<S.length){S.splice.apply(S,[U,V].concat(T))}else{S.push.apply(S,T)}}}else{S.splice(U,V)}return S},L=function(S,T,U){return I(S,T,U)},P=function(S,T,U){S.splice(T,U);return S},C=function(S,U,V){var T=H(S,U),W=S.slice(U,H(S,T+V));if(arguments.length<4){I(S,T,V)}else{I(S,T,V,J.call(arguments,3))}return W},D=function(S){return S.splice.apply(S,J.call(arguments,1))},Q=R?P:L,O=R?E:I,M=R?D:C,K={binarySearch:function(S,Z,X,T,W){var U=S.length,Y,V;if(X instanceof Function){W=X;X=0;T=U}else{if(T instanceof Function){W=T;T=U}else{if(X===undefined){X=0}if(T===undefined){T=U}W=W||K.lexicalCompare}}--T;while(X<=T){Y=(X+T)>>1;V=W(Z,S[Y]);if(V>=0){X=Y+1}else{if(V<0){T=Y-1}}}return X},defaultCompare:function(T,S){return(T<S)?-1:((T>S)?1:0)},lexicalCompare:function(T,S){T=String(T);S=String(S);return(T<S)?-1:((T>S)?1:0)},each:function(S,V,W,T){S=K.from(S);var U,X=S.length;if(T!==true){for(U=0;U<X;U++){if(V.call(W||S[U],S[U],U,S)===false){return U}}}else{for(U=X-1;U>-1;U--){if(V.call(W||S[U],S[U],U,S)===false){return U}}}return true},forEach:("forEach" in N)?function(S,T,U){return S.forEach(T,U)}:function(S,U,V){for(var T=0,W=S.length;T<W;T++){U.call(V,S[T],T,S)}},indexOf:F?function(S,U,T){return N.indexOf.call(S,U,T)}:function(S,W,T){var U,V=S.length;for(U=(T<0)?Math.max(0,V+T):T||0;U<V;U++){if(S[U]===W){return U}}return -1},contains:F?function(S,T){return N.indexOf.call(S,T)!==-1}:function(S,U){var T,V;for(T=0,V=S.length;T<V;T++){if(S[T]===U){return true}}return false},toArray:function(V,W,T){if(!V||!V.length){return[]}if(typeof V==="string"){V=V.split("")}if(G){return J.call(V,W||0,T||V.length)}var S=[],U;W=W||0;T=T?((T<0)?V.length+T:T):V.length;for(U=W;U<T;U++){S.push(V[U])}return S},pluck:function(S,X){var V=[],T,W,U;for(T=0,W=S.length;T<W;T++){U=S[T];V.push(U[X])}return V},map:("map" in N)?function(S,T,U){Ext.Assert.isFunction(T,"Ext.Array.map must have a callback function passed as second argument.");return S.map(T,U)}:function(S,V,X){Ext.Assert.isFunction(V,"Ext.Array.map must have a callback function passed as second argument.");var T=[],U=0,W=S.length;for(;U<W;U++){T[U]=V.call(X,S[U],U,S)}return T},every:("every" in N)?function(S,T,U){Ext.Assert.isFunction(T,"Ext.Array.every must have a callback function passed as second argument.");return S.every(T,U)}:function(S,U,V){Ext.Assert.isFunction(U,"Ext.Array.every must have a callback function passed as second argument.");var T=0,W=S.length;for(;T<W;++T){if(!U.call(V,S[T],T,S)){return false}}return true},some:("some" in N)?function(S,T,U){Ext.Assert.isFunction(T,"Ext.Array.some must have a callback function passed as second argument.");return S.some(T,U)}:function(S,U,V){Ext.Assert.isFunction(U,"Ext.Array.some must have a callback function passed as second argument.");var T=0,W=S.length;for(;T<W;++T){if(U.call(V,S[T],T,S)){return true}}return false},equals:function(S,V){var W=S.length,U=V.length,T;if(S===V){return true}if(W!==U){return false}for(T=0;T<W;++T){if(S[T]!==V[T]){return false}}return true},clean:function(S){var V=[],T=0,W=S.length,U;for(;T<W;T++){U=S[T];if(!Ext.isEmpty(U)){V.push(U)}}return V},unique:function(S){var U=[],T=0,W=S.length,V;for(;T<W;T++){V=S[T];if(K.indexOf(U,V)===-1){U.push(V)}}return U},filter:("filter" in N)?function(S,T,U){Ext.Assert.isFunction(T,"Ext.Array.filter must have a filter function passed as second argument.");return S.filter(T,U)}:function(S,V,W){Ext.Assert.isFunction(V,"Ext.Array.filter must have a filter function passed as second argument.");var T=[],U=0,X=S.length;for(;U<X;U++){if(V.call(W,S[U],U,S)){T.push(S[U])}}return T},findBy:function(S,U,W){var T=0,V=S.length;for(;T<V;T++){if(U.call(W||S,S[T],T)){return S[T]}}return null},from:function(T,U){if(T===undefined||T===null){return[]}if(Ext.isArray(T)){return(U)?J.call(T):T}var S=typeof T;if(T&&T.length!==undefined&&S!=="string"&&(S!=="function"||!T.apply)){return K.toArray(T)}return[T]},remove:function(S,T){var U=K.indexOf(S,T);if(U!==-1){Q(S,U,1)}return S},include:function(S,T){if(!K.contains(S,T)){S.push(T)}},clone:function(S){return J.call(S)},merge:function(){var V=J.call(arguments),S=[],T,U;for(T=0,U=V.length;T<U;T++){S=S.concat(V[T])}return K.unique(S)},intersect:function(){var d=[],X=J.call(arguments),T,b,W,U,g,f,S,c,V,a,Y,e,Z;if(!X.length){return d}T=X.length;for(Y=g=0;Y<T;Y++){f=X[Y];if(!U||f.length<U.length){U=f;g=Y}}U=K.unique(U);Q(X,g,1);S=U.length;T=X.length;for(Y=0;Y<S;Y++){c=U[Y];a=0;for(e=0;e<T;e++){b=X[e];W=b.length;for(Z=0;Z<W;Z++){V=b[Z];if(c===V){a++;break}}}if(a===T){d.push(c)}}return d},difference:function(Y,V){var U=J.call(Y),X=U.length,T,S,W;for(T=0,W=V.length;T<W;T++){for(S=0;S<X;S++){if(U[S]===V[T]){Q(U,S,1);S--;X--}}}return U},slice:([1,2].slice(1,undefined).length?function(S,T,U){return J.call(S,T,U)}:function(S,T,U){if(typeof T==="undefined"){return J.call(S)}if(typeof U==="undefined"){return J.call(S,T)}return J.call(S,T,U)}),sort:function(S,T){return B(S,T||K.lexicalCompare)},flatten:function(S){var T=[];function U(Y){var V,W,X;for(V=0,W=Y.length;V<W;V++){X=Y[V];if(Ext.isArray(X)){U(X)}else{T.push(X)}}return T}return U(S)},min:function(T,X){var S=T[0],U,W,V;for(U=0,W=T.length;U<W;U++){V=T[U];if(X){if(X(S,V)===1){S=V}}else{if(V<S){S=V}}}return S},max:function(S,X){var V=S[0],T,W,U;for(T=0,W=S.length;T<W;T++){U=S[T];if(X){if(X(V,U)===-1){V=U}}else{if(U>V){V=U}}}return V},mean:function(S){return S.length>0?K.sum(S)/S.length:undefined},sum:function(S){var W=0,T,V,U;for(T=0,V=S.length;T<V;T++){U=S[T];W+=U}return W},toMap:function(T,S,W){var U={},V=T.length;if(!S){while(V--){U[T[V]]=V+1}}else{if(typeof S==="string"){while(V--){U[T[V][S]]=V+1}}else{while(V--){U[S.call(W,T[V])]=V+1}}}return U},toValueMap:function(T,S,U,Z){var b={},X=T.length,d,W,c,Y,a,V;if(!S){while(X--){V=T[X];b[V]=V}}else{if(!(Y=(typeof S!=="string"))){Z=U}W=Z===1;d=Z===2;while(X--){V=T[X];a=Y?S.call(U,V):V[S];if(W){if(a in b){b[a].push(V)}else{b[a]=[V]}}else{if(d&&(a in b)){if((c=b[a]) instanceof Array){c.push(V)}else{b[a]=[c,V]}}else{b[a]=V}}}}return b},_replaceSim:I,_spliceSim:C,erase:Q,insert:function(S,U,T){return O(S,U,0,T)},replace:O,splice:M,push:function(V){var U=arguments.length,S=1,T;if(V===undefined){V=[]}else{if(!Ext.isArray(V)){V=[V]}}for(;S<U;S++){T=arguments[S];Array.prototype.push[Ext.isIterable(T)?"apply":"call"](V,T)}return V},numericSortFn:function(T,S){return T-S}};Ext.each=K.each;K.union=K.merge;Ext.min=K.min;Ext.max=K.max;Ext.sum=K.sum;Ext.mean=K.mean;Ext.flatten=K.flatten;Ext.clean=K.clean;Ext.unique=K.unique;Ext.pluck=K.pluck;Ext.toArray=function(){return K.toArray.apply(K,arguments)};return K});
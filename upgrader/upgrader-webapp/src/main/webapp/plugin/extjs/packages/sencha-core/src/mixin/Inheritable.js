Ext.define("Ext.mixin.Inheritable",{extend:"Ext.Mixin",mixinConfig:{id:"inheritable"},getInherited:function(A){var C=this,B=(A&&C.inheritedStateInner)||C.inheritedState,E=C.ownerCt||C.initOwnerCt,D=C.isContainer,F,H,G;if(!B||B.invalid){F=C.getRefOwner();if(E){G=C.ownerLayout===E.layout}C.inheritedState=B=Ext.Object.chain(F?F.getInherited(G):Ext.rootInheritedState);if(D){C.inheritedStateInner=H=Ext.Object.chain(B)}C.initInheritedState(B,H);B=(D&&A)?C.inheritedStateInner:C.inheritedState}return B},getInheritedConfig:function(B,E){var D=this.inheritedState,A,C;if(!D||D.invalid){D=this.getInherited()}C=D[B];if(E&&D.hasOwnProperty(B)){A=C;delete D[B];C=D[B];D[B]=A}return C},fixReference:function(){var B=this,A;if(B.reference){A=B.lookupReferenceHolder();if(A){A.attachReference(B)}}},resolveListenerScope:function(D){var C,A=D==="this",B=A||D==="controller";if(B){if(A){C=this}else{C=this.getController()}}else{C=this.getInheritedConfig("defaultListenerScope",true)||D}return C||null},lookupReferenceHolder:function(A){return this.getInheritedConfig("referenceHolder",A!==false)||null},getRefOwner:function(){return this.ownerCt||this.initOwnerCt||this.floatParent},initInheritedState:Ext.emptyFn,invalidateInheritedState:function(){var A=this.inheritedState;if(A){A.invalid=true;delete this.inheritedState}}},function(){Ext.rootInheritedState={}});
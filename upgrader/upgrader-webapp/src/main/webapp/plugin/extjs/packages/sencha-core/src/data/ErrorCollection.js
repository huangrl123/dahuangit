Ext.define("Ext.data.ErrorCollection",{extend:"Ext.util.MixedCollection",alternateClassName:"Ext.data.Errors",requires:["Ext.data.Error"],init:function(K){var I=this,M=K.fields,H=K.validators,C=K.data,N,G,O,F,E,A,J,D,L,B;for(F=0,J=M.length;F<J;++F){G=M[F];B=G.name;L=C[B];if(G.validate&&!G.validate.$nullFn){N=I.length;D=G.validate(L,null,I);if(N===I.length&&D!==true){I.add(B,D)}}if(H){O=H[B];if(O){for(E=0,A=O.length;E<A;++E){D=O[E].validate(L,K);if(D!==true){I.add(B,D)}}}}}return I},add:function(A,E){var C=this,F=Ext.data.field.Field.defaultInvalidMessage,B=A,D;if(Ext.isString(A)){B=new Ext.data.Error({field:A,message:E||F})}else{if(!(B.isError)){B=new Ext.data.Error({field:B.field||B.name,message:B.error||B.message||B.msg||F})}A=B.field}D=C.get(A);if(D){if(Ext.isArray(D)){D.push(B);return D}C.removeAtKey(A);B=[D,B];B.field=A;B=[B]}return C.callParent([B])},getKey:function(A){return A.field},isValid:function(){return this.length===0},getByField:function(A){var B=this.get(A);if(B&&!Ext.isArray(B)){B=[B]}return B||[]}});
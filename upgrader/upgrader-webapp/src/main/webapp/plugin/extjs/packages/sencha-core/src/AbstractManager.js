Ext.define("Ext.AbstractManager",{requires:["Ext.util.HashMap"],typeName:"type",constructor:function(A){Ext.apply(this,A||{});this.all=new Ext.util.HashMap();this.types={}},get:function(A){return this.all.get(A)},register:function(C){var A=this.all,B=A.getKey(C);if(B===undefined){Ext.Error.raise("Key is undefined. Please ensure the item has a key before registering the item.")}if(A.containsKey(B)){Ext.Error.raise('Registering duplicate id "'+B+'" with this manager')}this.all.add(C)},unregister:function(A){this.all.remove(A)},registerType:function(A,B){this.types[A]=B;B[this.typeName]=A},isRegistered:function(A){return this.types[A]!==undefined},create:function(C,D){var A=C[this.typeName]||C.type||D,B=this.types[A];if(B===undefined){Ext.Error.raise("The '"+A+"' type has not been registered with this manager")}return new B(C)},onAvailable:function(F,B,D){var A=this.all,C,E;if(A.containsKey(F)){C=A.get(F);B.call(D||C,C)}else{E=function(H,G,I){if(G==F){B.call(D||I,I);A.un("add",E)}};A.on("add",E)}},each:function(A,B){this.all.each(A,B||this)},getCount:function(){return this.all.getCount()}});
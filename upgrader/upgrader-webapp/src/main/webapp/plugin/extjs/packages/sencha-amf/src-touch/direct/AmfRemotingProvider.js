Ext.define("Ext.direct.AmfRemotingProvider",{alias:"direct.amfremotingprovider",extend:"Ext.direct.JsonProvider",requires:["Ext.direct.JsonProvider","Ext.util.MixedCollection","Ext.util.DelayedTask","Ext.direct.Transaction","Ext.direct.RemotingMethod","Ext.data.amf.XmlEncoder","Ext.data.amf.XmlDecoder","Ext.data.amf.Encoder","Ext.data.amf.Packet","Ext.data.amf.RemotingMessage","Ext.direct.ExceptionEvent","Ext.Ajax"],config:{namespace:undefined,url:null,endpoint:null,enableUrlEncode:null,binary:false,enableBuffer:10,maxRetries:1,timeout:undefined,actions:{},clientId:null,DSId:null},constructor:function(A){var B=this;B.callParent(arguments);B.transactions=Ext.create("Ext.util.Collection",function(C){return C.getId()});B.callBuffer=[]},applyNamespace:function(A){if(Ext.isString(A)){return Ext.ns(A)}return A||window},initAPI:function(){var A=this.getActions(),H=this.getNamespace(),G,C,D,E,B,F;for(G in A){if(A.hasOwnProperty(G)){C=H[G];if(!C){C=H[G]={}}D=A[G];for(E=0,B=D.length;E<B;++E){F=Ext.create("Ext.direct.RemotingMethod",D[E]);C[F.getName()]=this.createHandler(G,F)}}}},createHandler:function(A,D){var C=this,B;if(!D.getFormHandler()){B=function(){C.configureRequest(A,D,Array.prototype.slice.call(arguments,0))}}else{B=function(F,E,G){C.configureFormRequest(A,D,F,E,G)}}B.directCfg={action:A,method:D};return B},isConnected:function(){return !!this.connected},connect:function(){var A=this;if(A.getUrl()){A.setClientId(Ext.data.amf.XmlEncoder.generateFlexUID());A.initAPI();A.connected=true;A.fireEvent("connect",A);A.setDSId(null)}else{Ext.Error.raise("Error initializing RemotingProvider, no url configured.")}},disconnect:function(){var A=this;if(A.connected){A.connected=false;A.fireEvent("disconnect",A)}},runCallback:function(C,F){var A=!!F.getStatus(),B=A?"success":"failure",E=C&&C.getCallback(),D;if(E){D=F.getResult();if(Ext.isFunction(E)){E(D,F,A)}else{Ext.callback(E[B],E.scope,[D,F,A]);Ext.callback(E.callback,E.scope,[D,F,A])}}},onData:function(G,B,J){var H=this,F=0,D,I,E,A,C;if(B){I=H.createEvents(J);for(D=I.length;F<D;++F){E=I[F];A=H.getTransaction(E);H.fireEvent("data",H,E);if(A){H.runCallback(A,E,true);Ext.direct.Manager.removeTransaction(A)}}}else{C=[].concat(G.transaction);for(D=C.length;F<D;++F){A=H.getTransaction(C[F]);if(A&&A.getRetryCount()<H.getMaxRetries()){A.retry()}else{E=Ext.create("Ext.direct.ExceptionEvent",{data:null,transaction:A,code:Ext.direct.Manager.exceptions.TRANSPORT,message:"Unable to connect to the server.",xhr:J});H.fireEvent("data",H,E);if(A){H.runCallback(A,E,false);Ext.direct.Manager.removeTransaction(A)}}}}},getTransaction:function(A){return A&&A.getTid?Ext.direct.Manager.getTransaction(A.getTid()):null},configureRequest:function(H,G,B){var F=this,I=G.getCallData(B),D=I.data,C=I.callback,E=I.scope,A;A=Ext.create("Ext.direct.Transaction",{provider:F,args:B,action:H,method:G.getName(),data:D,callback:E&&Ext.isFunction(C)?Ext.Function.bind(C,E):C});if(F.fireEvent("beforecall",F,A,G)!==false){Ext.direct.Manager.addTransaction(A);F.queueTransaction(A);F.fireEvent("call",F,A,G)}},getCallData:function(A){if(this.getBinary()){return{targetUri:A.getAction()+"."+A.getMethod(),responseUri:"/"+A.getId(),body:A.getData()||[]}}else{return new Ext.data.amf.RemotingMessage({body:A.data||[],clientId:this.getClientId(),destination:A.getAction(),headers:{DSEndpoint:this.getEndpoint(),DSId:this.getDSId()||"nil"},messageId:Ext.data.amf.XmlEncoder.generateFlexUID(A.getId()),operation:A.getMethod(),timestamp:0,timeToLive:0})}},sendRequest:function(B){var I=this,E={url:I.getUrl(),callback:I.onData,scope:I,transaction:B,timeout:I.getTimeout()},F,K=I.getEnableUrlEncode(),G=0,D,H,A,C=[],J=[];if(Ext.isArray(B)){if(!I.getBinary()){Ext.Error.raise("Mutltiple messages in the same call are not supported in AMFX")}for(G=0,D=B.length;G<D;++G){C.push(I.getCallData(B[G]))}}else{C.push(I.getCallData(B))}if(I.getBinary()){A=new Ext.data.amf.Encoder({format:0});A.writeAmfPacket(J,C);E.binaryData=A.getBytes();E.binary=true;E.headers={"Content-Type":"application/x-amf"}}else{A=new Ext.data.amf.XmlEncoder();A.writeAmfxRemotingPacket(C[0]);E.xmlData=A.getBody()}Ext.Ajax.request(E)},queueTransaction:function(B){var A=this,C=false;if(B.getForm()){A.sendFormRequest(B);return}A.callBuffer.push(B);if(C){if(!A.callTask){A.callTask=Ext.create("Ext.util.DelayedTask",A.combineAndSend,A)}A.callTask.delay(Ext.isNumber(C)?C:10)}else{A.combineAndSend()}},combineAndSend:function(){var A=this.callBuffer,B=A.length;if(B>0){this.sendRequest(B==1?A[0]:A);this.callBuffer=[]}},createEvents:function(I){var D=null,A=[],H=[],E,F=0,G,B;try{if(this.getBinary()){B=new Ext.data.amf.Packet();D=B.decode(I.responseBytes)}else{B=new Ext.data.amf.XmlDecoder();D=B.readAmfxMessage(I.responseText)}}catch(C){E=new Ext.direct.ExceptionEvent({data:C,xhr:I,code:Ext.direct.Manager.exceptions.PARSE,message:"Error parsing AMF response: \n\n "+D});return[E]}if(this.getBinary()){for(F=0;F<D.getMessages().length;F++){H.push(this.createEvent(D.getMessages()[F]))}}else{H.push(this.createEvent(D))}return H},createEvent:function(F){var D=F.targetURI.split("/"),C,E,G,B,A=this;if(A.getBinary()){C=D[1];B=2}else{C=Ext.data.amf.XmlDecoder.decodeTidFromFlexUID(F.message.correlationId);B=1}if(D[B]=="onStatus"){G={tid:C,data:(A.getBinary()?F.body:F.message),code:(A.getBinary()?F.body.code:F.message.faultCode),message:(A.getBinary()?F.body.message:F.message.faultString)};E=Ext.create("direct.exception",G)}else{if(D[B]=="onResult"){G={tid:C,data:(A.getBinary()?F.body:F.message),result:(A.getBinary()?F.body:F.message.body)};E=Ext.create("direct.rpc",G)}else{Ext.Error.raise("Unknown AMF return status: "+D[B])}}return E}});
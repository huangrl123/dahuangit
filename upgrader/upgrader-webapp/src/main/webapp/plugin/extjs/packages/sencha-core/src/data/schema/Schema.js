Ext.define("Ext.data.schema.Schema",{mixins:["Ext.mixin.Factoryable"],requires:["Ext.util.ObjectTemplate","Ext.data.schema.OneToOne","Ext.data.schema.ManyToOne","Ext.data.schema.ManyToMany","Ext.data.schema.Namer"],alias:"schema.default",aliasPrefix:"schema.",isSchema:true,type:"default",statics:{instances:{},get:function(C){var A=this,F=A.instances,G="default",B=C&&Ext.isString(C),E,D;if(C){if(C.isSchema){return C}G=B?C:(C.id||G)}if(!(E=F[G])){F[G]=E=A.create(C);E.id=G}else{if(C&&!B){if(G!=="default"){Ext.Error.raise("Only the default Schema instance can be reconfigured")}D=Ext.merge({},E.config);Ext.merge(D,C);E.setConfig(D);E.config=D;E.setConfig=function(){Ext.Error.raise("The schema can only be reconfigured once")}}}return E},lookupEntity:function(F){var D=null,C=this.instances,B,E,A;if(F){if(F.isEntity){D=F.self}else{if(Ext.isFunction(F)){D=F}else{if(Ext.isString(F)){for(E in C){A=C[E];B=A.getEntity(F);if(B){if(D){Ext.Error.raise('Ambiguous entity name "'+F+'". Defined by schema "'+D.schema.type+'" and "'+E+'"')}D=B}}if(!D){Ext.Error.raise('No such Entity "'+F+'".')}}}}}return D}},assocCount:0,entityCount:0,config:{defaultIdentifier:null,namer:"default",namespace:null,proxy:{type:"ajax",url:"{prefix}/{entityName}",reader:{type:"json"}},urlPrefix:""},onClassExtended:function(A,C){var B=C.alias;if(B&&!C.type){if(!Ext.isString(B)){B=B[0]}A.prototype.type=B.substring(this.prototype.aliasPrefix.length)}},constructor:function(A){this.initConfig(A);this.clear()},applyDefaultIdentifier:function(A){return A&&Ext.Factory.dataIdentifier(A)},applyNamer:function(B){var A=Ext.data.schema.Namer.create(B);A.schema=this;return A},applyNamespace:function(A){if(A){var B=A.length-1;if(A.charAt(B)!=="."){A+="."}}return A},applyProxy:function(A){return Ext.util.ObjectTemplate.create(A)},eachAssociation:function(B,D){var A=this.associations,C;for(C in A){if(A.hasOwnProperty(C)){if(B.call(D,C,A[C])===false){break}}}},eachEntity:function(A,C){var D=this.entities,B;for(B in D){if(D.hasOwnProperty(B)){if(A.call(C,B,D[B].cls)===false){break}}}},getAssociation:function(B){var A=this.associations[B];return A||null},getEntity:function(B){var A=this.entityClasses[B]||this.entities[B];return(A&&A.cls)||null},getEntityName:function(B){var A=this.getNamespace(),D,C;if(typeof B==="string"){C=B}else{C=B.$className||null}if(C){if(A){D=A.length;if(C.substring(0,D)!==A){return C}}if(D){C=C.substring(D)}}return C},hasAssociations:function(A){A=A.entityName||A;return !!this.associationEntityMap[A]},hasEntity:function(B){var A=this.getEntityName(B);return !!(this.entities[A]||this.entityClasses[A])},addMatrix:function(G,K,F,M,C){var D=this,B=D.getNamer(),L=D.associations,O=D.entities,P=M.type,E=C.type,H=M.field||B.apply("idField",P),A=C.field||B.apply("idField",E),N=M.role||B.matrixRole(F,P),R=C.role||B.matrixRole(F,E),J,Q,I;Q=O[P]||(O[P]={cls:null,name:P,associations:{}});I=O[E]||(O[E]={cls:null,name:E,associations:{}});++D.assocCount;L[K]=J=new Ext.data.schema.ManyToMany({name:K,schema:D,definedBy:G,left:{cls:Q.cls,type:P,role:N,field:H},right:{cls:I.cls,type:E,role:R,field:A}});Q.associations[J.right.role]=J.right;I.associations[J.left.role]=J.left;D.associationEntityMap[G.entityName]=true;D.decorateModel(J)},addReference:function(I,K,B,J){var E=this,N=E.getNamer(),R=E.entities,O=E.associations,U=I.entityName,S=B.association,A=!!B.legacy,D=B.child,M=B.parent,L=B.role,F=B.type||M||D,G=B.inverse,P=Ext.isString(G)?{role:G}:G,Q=P&&P.role,C,H;if(!L){if(A){L=N.apply("uncapitalize",F)}else{L=N.apply("fieldRole",K.name)}}if(!Q){Q=N.inverseFieldRole(U,J,L,F)}if(!S){if(J){S=N.oneToOne(I,Q,F,L)}else{S=N.manyToOne(I,Q,F,L)}}if(S in O){Ext.Error.raise('Duplicate association: "'+S+'" declared by '+U+"."+K.name+" (collides with "+O[S].definedBy.entityName+")")}if(K&&K.definedBy===R[F]){Ext.Error.raise("ForeignKey reference should not be owned by the target model")}C=R[F]||(R[F]={cls:null,name:F,associations:{}});H=J?Ext.data.schema.OneToOne:Ext.data.schema.ManyToOne;S=new H({name:S,owner:D?"left":(M?"right":null),definedBy:I,schema:E,field:K,nullable:K?!!K.allowBlank:true,legacy:B.legacy,left:{cls:I,type:U,role:Q,extra:P},right:{cls:C.cls,type:F,role:L,extra:B}});I.associations[L]=S.right;C.associations[Q]=S.left;if(K){K.reference=S.right;I.references.push(K)}++E.assocCount;E.associationEntityMap[U]=true;if(C.cls){E.associationEntityMap[C.cls.entityName]=true}O[S.name]=S;if(S.right.cls){E.decorateModel(S)}},privates:{addEntity:function(H){var I=this,K=I.entities,A=H.entityName,C=K[A],J=H.fields,E,G,F,D,B;if(!C){K[A]=C={name:A,associations:{}}}else{if(C.cls){Ext.Error.raise('Duplicate entity name "'+A+'": '+C.cls.$className+" and "+H.$className)}else{E=C.associations;for(B in E){E[B].inverse.cls=H;I.associationEntityMap[A]=true;I.decorateModel(E[B].association)}}}C.cls=H;H.prototype.associations=H.associations=C.associations;I.entityClasses[H.$className]=C;++I.entityCount;for(F=0,D=J.length;F<D;++F){G=J[F];if(G.reference){I.addReferenceDescr(H,G)}}},addMatrices:function(B,F){var E=this,A,C,D;if(Ext.isString(F)){E.addMatrixDescr(B,null,F)}else{if(F[0]){for(A=0,C=F.length;A<C;++A){E.addMatrixDescr(B,null,F[A])}}else{for(D in F){E.addMatrixDescr(B,D,F[D])}}}},addMatrixDescr:function(K,M,C){var L=this,A=K.entityName,G=L.associations,D=L.getNamer(),H=C.left,B=C.right,I,J;if(Ext.isString(C)){if(C.charAt(0)==="#"){H={type:A};B={type:C.substring(1)}}else{if(C.charAt(I=C.length-1)==="#"){H={type:C.substring(0,I)};B={type:A}}else{if(D.apply("multiRole",A)<D.apply("multiRole",C)){H={type:A};B={type:C}}else{H={type:C};B={type:A}}}}}else{Ext.Assert.isString(C.type,'No "type" for manyToMany in '+A);J=C.relation;if(H||(!B&&D.apply("multiRole",A)<D.apply("multiRole",C.type))){if(!H||H===true){H={type:A}}else{H=Ext.apply({type:A},H)}B=C}else{if(!B||B===true){B={type:A}}else{B=Ext.apply({type:A},B)}H=C}}if(!M){M=D.manyToMany(J,H.type,B.type)}if(!(M in G)){L.addMatrix(K,M,J,H,B)}else{var N=G[M],E=[N.kind,N.left.type,N.left.role,N.left.field,N.right.type,N.right.role,N.right.field].join("|");delete G[M];L.addMatrix(K,M,J,H,B);var F=G[M];G[M]=N;N.left.cls.associations[N.right.role]=N.right;N.right.cls.associations[N.left.role]=N.left;--L.assocCount;F=[F.kind,F.left.type,F.left.role,F.left.field,F.right.type,F.right.role,F.right.field].join("|");if(E!=F){Ext.log.warn(M+"("+N.definedBy.entityName+"): "+E);Ext.log.warn(M+"("+A+"): "+F);Ext.Error.raise('Conflicting association: "'+M+'" declared by '+A+" was previously declared by "+N.definedBy.entityName)}}},addReferenceDescr:function(A,D){var B=this,C=D.$reference;if(Ext.isString(C)){C={type:C}}else{C=Ext.apply({},C)}if(C.legacy){if(C.single){B.addLegacySingle(A,C)}else{B.addLegacyHasMany(A,C)}}else{B.addReference(A,D,C,D.unique)}},addPending:function(D,B,C,A){var E=this.pending;if(!E[D]){E[D]=[]}E[D].push([B,C,A])},addLegacyBelongsTo:function(A,B){this.addLegacySingle(A,B)},addLegacyHasOne:function(A,B){this.addLegacySingle(A,B)},addLegacySingle:function(B,C){var A,D,E;C=this.constructLegacyAssociation(B,C);C.single=true;D=C.type;A=C.foreignKey||(D.toLowerCase()+"_id");E=B.getField(A);if(E){E.$reference=C}this.addReference(B,E,C,true)},addLegacyHasMany:function(H,D){var I=this,K=I.entities,C=I.pending,G=D.associationKey,E,A,J,F,B,L;D=this.constructLegacyAssociation(H,D);A=D.type;F=K[A];if(F&&F.cls){D.type=H.entityName;B=D.foreignKey||(D.type.toLowerCase()+"_id");E=F.cls;J=E.getField(B);D.inverse=D;L=D.name;if(L||G){D.inverse={};if(L){D.inverse.role=L}if(G){D.inverse.associationKey=G}}if(J){J.$reference=D}I.addReference(E,J,D,false)}else{if(!C[A]){C[A]=[]}C[A].push([H,D])}},constructLegacyAssociation:function(A,B){if(Ext.isString(B)){B={model:B}}B.legacy=true;B.type=this.getEntityName(B.model);if(B.associatedName){B.role=B.associatedName}return B},afterLegacyAssociations:function(B){var E=this.pending,C=B.entityName,F=E[C],A,D;if(F){for(A=0,D=F.length;A<D;++A){this.addLegacyHasMany.apply(this,F[A])}delete E[C]}},clear:function(A){var B=this;delete B.setConfig;B.associations={};B.associationEntityMap={};B.entities={};B.entityClasses={};B.pending={};B.assocCount=B.entityCount=0;if(A){B.setNamespace(null)}},constructProxy:function(A){var C=this,D=Ext.Object.chain(A),B=C.getProxy();D.schema=C;D.prefix=C.getUrlPrefix();return B.apply(D)},applyDecoration:function(B){var C=this,E=B.inverse.cls,G=C.getNamer(),F,D,A;if(E&&!B.decorated){B.decorated=true;A=E.prototype;if(!(F=B.getterName)){B.getterName=F=G.getterName(B)}A[F]=B.createGetter();if(B.createSetter){if(!(D=B.setterName)){B.setterName=D=G.setterName(B)}A[D]=B.createSetter()}}},decorateModel:function(A){this.applyDecoration(A.left);this.applyDecoration(A.right)},rankEntities:function(){var E=this,F=E.entities,C=Ext.Object.getKeys(F),B=C.length,A,D;E.nextRank=1;C.sort();for(D=0;D<B;++D){A=F[C[D]].cls;if(!A.rank){E.rankEntity(A)}}E.topoStack=null},rankEntity:function(B){var C=B.associations,F,G,E;var A=this.topoStack||(this.topoStack=[]),D=B.entityName;A.push(D);if(B.rank===0){Ext.Error.raise(D+" has circular foreign-key references: "+A.join(" --> "))}B.rank=0;for(E in C){G=C[E];if(!G.left&&G.association.field){F=G.cls;if(!F.rank){this.rankEntity(F)}}}B.rank=this.nextRank++;A.pop()}}});
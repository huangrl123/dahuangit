Ext.define("Ext.Evented",{alternateClassName:"Ext.EventedBase",mixins:["Ext.mixin.Observable"],statics:{generateSetter:function(D){var F=D.names,C=D.name,G=F.internal,A=F.apply,E=F.changeEvent,B=F.doSet;return function(L){var J=this,I=J.$configPrefixed?G:C,M=J.initialized,H,K=J[A];if(K){L=K.call(J,L,J[I]);if(L===undefined){return J}}H=J[I];if(L!==H){if(M){J.fireAction(E,[J,L,H],J.doSet,J,{nameMap:F})}else{J[I]=L;if(J[B]){J[B](L,H)}}}return this}}},initialized:false,constructor:function(A){this.mixins.observable.constructor.call(this,A);this.initialized=true},doSet:function(D,E,B,C){var A=C.nameMap;D[A.internal]=E;if(D[A.doSet]){D[A.doSet].call(this,E,B)}},onClassExtended:function(C,G){if(!G.hasOwnProperty("eventedConfig")){return}var E=G.config,A=G.eventedConfig,F="eventedSetter",D,B;if(E){Ext.applyIf(E,A)}else{C.addConfig(A)}for(D in A){if(A.hasOwnProperty(D)){B=Ext.Config.get(D);G[B.names.set]=B[F]||(B[F]=this.generateSetter(B))}}}});
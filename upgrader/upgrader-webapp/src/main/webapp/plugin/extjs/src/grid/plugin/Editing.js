Ext.define("Ext.grid.plugin.Editing",{extend:"Ext.plugin.Abstract",alias:"editing.editing",requires:["Ext.grid.column.Column","Ext.util.KeyNav","Ext.form.field.Base","Ext.view.Table"],mixins:{observable:"Ext.util.Observable"},clicksToEdit:2,triggerEvent:undefined,relayedEvents:["beforeedit","edit","validateedit","canceledit"],defaultFieldUI:"default",defaultFieldXType:"textfield",editStyle:"",constructor:function(A){var B=this;B.callParent(arguments);B.mixins.observable.constructor.call(B);B.on("edit",function(D,C){B.fireEvent("afteredit",D,C)})},init:function(B){var A=this;A.grid=B;A.view=B.view;A.initEvents();A.mon(B,{beforereconfigure:A.onBeforeReconfigure,reconfigure:A.onReconfigure,scope:A,beforerender:{fn:A.onReconfigure,single:true,scope:A}});B.relayEvents(A,A.relayedEvents);if(A.grid.ownerLockable){A.grid.ownerLockable.relayEvents(A,A.relayedEvents)}B.isEditable=true;B.editingPlugin=B.view.editingPlugin=A},resolveListenerScope:function(A){var B=this.grid;return B?B.resolveListenerScope(A):this.callParent([A])},onBeforeReconfigure:function(){this.reconfiguring=true},onReconfigure:function(){this.initFieldAccessors(this.grid.getTopLevelColumnManager().getColumns());delete this.reconfiguring},destroy:function(){var A=this,B=A.grid;Ext.destroy(A.keyNav);A.clearListeners();if(B){B.editingPlugin=B.view.editingPlugin=A.grid=A.view=A.editor=A.keyNav=null}},getEditStyle:function(){return this.editStyle},initFieldAccessors:function(E){if(E.isGroupHeader){E=E.getGridColumns()}else{if(!Ext.isArray(E)){E=[E]}}var B=this,C,A=E.length,D;for(C=0;C<A;C++){D=E[C];if(!D.getEditor){D.getEditor=function(G,F){return B.getColumnField(this,F)}}if(!D.hasEditor){D.hasEditor=function(){return B.hasColumnField(this)}}if(!D.setEditor){D.setEditor=function(F){B.setColumnField(this,F)}}}},removeFieldAccessors:function(D){if(D.isGroupHeader){D=D.getGridColumns()}else{if(!Ext.isArray(D)){D=[D]}}var B,A=D.length,C;for(B=0;B<A;B++){C=D[B];C.getEditor=C.hasEditor=C.setEditor=C.field=C.editor=null}},getColumnField:function(D,A){var B=this,C=D.field;if(!(C&&C.isFormField)){C=D.field=B.createColumnField(D,A)}if(C&&C.ui==="default"&&!C.hasOwnProperty("ui")){C.ui=B.defaultFieldUI}return C},hasColumnField:function(A){return !!(A.field&&A.field.isComponent)},setColumnField:function(B,A){B.field=A;B.field=this.createColumnField(B)},createColumnField:function(D,A){var C=D.field,B;if(!C&&D.editor){C=D.editor;D.editor=null}if(!C&&A){C=A}if(C){B=D.dataIndex;if(C.isComponent){C.column=D}else{if(Ext.isString(C)){C={name:B,xtype:C,column:D}}else{C=Ext.apply({name:B,column:D},C)}C=Ext.ComponentManager.create(C,this.defaultFieldXType)}C.dataIndex=B;C.isEditorComponent=true;D.field=C}return C},initEvents:function(){var A=this;A.initEditTriggers();A.initCancelTriggers()},initCancelTriggers:Ext.emptyFn,initEditTriggers:function(){var A=this,B=A.view;if(A.triggerEvent=="cellfocus"){A.mon(B,"cellfocus",A.onCellFocus,A)}else{if(A.triggerEvent=="rowfocus"){A.mon(B,"rowfocus",A.onRowFocus,A)}else{if(B.getSelectionModel().isCellModel){B.onCellFocus=A.beforeViewCellFocus.bind(A)}A.mon(B,A.triggerEvent||("cell"+(A.clicksToEdit===1?"click":"dblclick")),A.onCellClick,A)}}A.initAddRemoveHeaderEvents();B.on("render",A.initKeyNavHeaderEvents,A,{single:true})},beforeViewCellFocus:function(A){if(this.view.selModel.keyNavigation||!this.editing||!this.isCellEditable||!this.isCellEditable(A.row,A.columnHeader)){this.view.focusCell.apply(this.view,arguments)}},onRowFocus:function(B,A,C){this.startEdit(A,0)},onCellFocus:function(B,C,A){this.startEdit(A.row,A.column)},onCellClick:function(A,J,D,H,E,I,C){var G=A.expanderSelector,F=A.ownerCt.getColumnManager().getHeaderAtIndex(D),B=F.getEditor(H);if(this.shouldStartEdit(B)&&(!G||!C.getTarget(G))){this.startEdit(H,F)}},initAddRemoveHeaderEvents:function(){var A=this,B=A.grid.headerCt;A.mon(B,{scope:A,add:A.onColumnAdd,columnmove:A.onColumnMove,beforedestroy:A.beforeGridHeaderDestroy})},initKeyNavHeaderEvents:function(){var A=this;A.keyNav=Ext.create("Ext.util.KeyNav",A.view.el,{enter:A.onEnterKey,esc:A.onEscKey,scope:A})},onColumnAdd:function(A,B){this.initFieldAccessors(B)},onColumnMove:Ext.emptyFn,onEnterKey:function(B){var D=this,G=D.grid,E=G.getSelectionModel(),A,C,F;if(E.getCurrentPosition&&(C=E.getCurrentPosition())){A=C.record;F=C.columnHeader}else{A=E.getLastSelected();F=G.getColumnManager().getHeaderAtIndex(0)}if(A&&F){D.startEdit(A,F)}},onEscKey:function(A){return this.cancelEdit()},beforeEdit:Ext.emptyFn,shouldStartEdit:function(A){return !!A},startEdit:function(C,D){var B=this,A,E=B.grid.lockable?B.grid:B.view;if(!E.componentLayoutCounter){E.on({boxready:Ext.Function.bind(B.startEdit,B,[C,D]),single:true});return false}if(B.grid.collapsed||!B.grid.view.isVisible(true)){return false}A=B.getEditingContext(C,D);if(A==null){return false}if(!B.preventBeforeCheck){if(B.beforeEdit(A)===false||B.fireEvent("beforeedit",B,A)===false||A.cancel){return false}}return A},getEditingContext:function(F,C){var D=this,H=D.grid,E=H.columnManager,A,I,G,B;if(Ext.isNumber(C)){C=E.getHeaderAtIndex(C)}if(!C){return}if(C.hidden){C=C.next(":not([hidden])")||C.prev(":not([hidden])")}A=C.getOwnerHeaderCt().view;I=A.getRow(F);if(!I){return}B=E.getHeaderIndex(C);if(Ext.isNumber(F)){G=F;F=A.getRecord(I)}else{G=A.indexOf(I)}if(!F){return}return{grid:H,view:A,store:A.dataSource,record:F,field:C.dataIndex,value:F.get(C.dataIndex),row:I,column:C,rowIdx:G,colIdx:B}},cancelEdit:function(){var A=this;A.editing=false;A.fireEvent("canceledit",A,A.context)},completeEdit:function(){var A=this;if(A.editing&&A.validateEdit()){A.fireEvent("edit",A,A.context)}A.context=null;A.editing=false},validateEdit:function(){var B=this,A=B.context;return B.fireEvent("validateedit",B,A)!==false&&!A.cancel}});
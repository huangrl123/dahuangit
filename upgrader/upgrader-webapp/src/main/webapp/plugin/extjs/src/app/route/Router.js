Ext.define("Ext.app.route.Router",{singleton:true,requires:["Ext.app.route.Queue","Ext.app.route.Route","Ext.util.History"],multipleToken:"|",queueRoutes:true,constructor:function(){var A=Ext.util.History;if(!A.ready){A.init()}A.on("change",this.onStateChange,this);this.clear()},onStateChange:function(N){var J=this,I=J.application,F=J.routes,K=F.length,L=J.queueRoutes,G=N.split(J.multipleToken),D=0,M=G.length,H,E,B,A,C;for(;D<M;D++){N=G[D];C=false;if(L){E=new Ext.app.route.Queue({token:N})}for(H=0;H<K;H++){B=F[H];A=B.recognize(N);if(A){C=true;if(L){E.queueAction(B,A)}else{B.execute(N,A)}}}if(L){E.runQueue()}if(!C&&I){I.fireEvent("unmatchedroute",N)}}},connect:function(B,A,D){var C={url:B,action:A,controller:D};if(Ext.isObject(A)){Ext.merge(C,A)}this.routes.push(new Ext.app.route.Route(C))},disconnectAll:function(F){var E=this.routes,D=E.length,A=[],B,C;for(B=0;B<D;++B){C=E[B];if(C.controller!==F){A.push(C)}}this.routes=A},recognize:function(C){var E=this.routes||[],B=0,D=E.length,A,F;for(;B<D;B++){A=E[B];F=A.recognize(C);if(F){return{route:A,args:F}}}return false},draw:function(A){A.call(this,this)},clear:function(){this.routes=[]}});
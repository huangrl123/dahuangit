Ext.define("Ext.layout.container.Column",{extend:"Ext.layout.container.Auto",alias:["layout.column"],alternateClassName:"Ext.layout.ColumnLayout",type:"column",itemCls:Ext.baseCSSPrefix+"column",targetCls:Ext.baseCSSPrefix+"column-layout-ct",columnWidthSizePolicy:{readsWidth:0,readsHeight:1,setsWidth:1,setsHeight:0},createsInnerCt:true,manageOverflow:true,setsItemSize:true,isItemShrinkWrap:function(A){return true},getItemSizePolicy:function(B,A){if(B.columnWidth){if(!A){A=this.owner.getSizeModel()}if(!A.width.shrinkWrap){return this.columnWidthSizePolicy}}return this.autoSizePolicy},calculateItems:function(A,D){var J=this,E=A.targetContext,L=A.childItems,K=L.length,I=0,B=D.gotWidth,H,N,G,F,C,M;if(B===false){E.domBlock(J,"width");H=true}else{if(B){N=D.width}else{return true}}for(G=0;G<K;++G){F=L[G];C=F.getMarginInfo().width;if(!F.widthModel.calculated){M=F.getProp("width");if(typeof M!="number"){F.block(J,"width");H=true}I+=M+C}}if(!H){N=(N<I)?0:N-I;for(G=0;G<K;++G){F=L[G];if(F.widthModel.calculated){C=F.marginInfo.width;M=F.target.columnWidth;M=Math.floor(M*N)-C;M=F.setWidth(M);I+=M+C}}A.setContentWidth(I+A.paddingContext.getPaddingInfo().width)}return !H}});
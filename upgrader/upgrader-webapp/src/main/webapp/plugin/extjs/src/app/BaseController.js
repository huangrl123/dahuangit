Ext.define("Ext.app.BaseController",{requires:["Ext.app.EventBus","Ext.app.domain.Global"],uses:["Ext.app.domain.Controller"],mixins:{observable:"Ext.util.Observable"},isController:true,config:{id:null,control:null,listen:null,routes:null,before:null},constructor:function(A){var B=this;B.mixins.observable.constructor.call(B,A);delete B.control;delete B.listen;B.eventbus=Ext.app.EventBus;B.initConfig(A)},applyListen:function(A){if(Ext.isObject(A)){A=Ext.clone(A)}return A},applyControl:function(A){if(Ext.isObject(A)){A=Ext.clone(A)}return A},updateControl:function(A){if(A){this.ensureId&&this.ensureId();this.control(A)}},updateListen:function(A){if(A){this.ensureId&&this.ensureId();this.listen(A)}},updateRoutes:function(G){if(G){var D=this,A=D.getBefore()||{},C=Ext.app.route.Router,B,F,E;for(B in G){F=G[B];if(Ext.isString(F)){F={action:F}}E=F.action;if(!F.before){F.before=A[E]}else{if(A[E]){Ext.log.warn('You have a before method configured on a route ("'+B+'") and in the before object property also in the "'+D.self.getName()+'" controller. Will use the before method in the route and disregard the one in the before property.')}}C.connect(B,F,D)}}},isActive:function(){return true},control:function(C,E,F){var D=this,A=F,B;if(Ext.isString(C)){B={};B[C]=E}else{B=C;A=E}D.eventbus.control(B,A||D)},listen:function(A,B){this.eventbus.listen(A,B||this)},destroy:function(){var A=this.eventbus;Ext.app.route.Router.disconnectAll(this);if(A){A.unlisten(this);this.eventbus=null}},redirectTo:function(B,C){if(!C){var A=Ext.util.History.getToken();if(A===B){return false}}else{Ext.app.route.Router.onStateChange(B)}Ext.util.History.add(B);return true}});
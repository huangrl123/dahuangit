Ext.define("Ext.form.field.TextArea",{extend:"Ext.form.field.Text",alias:["widget.textareafield","widget.textarea"],alternateClassName:"Ext.form.TextArea",requires:["Ext.XTemplate","Ext.util.DelayedTask"],fieldSubTpl:['<textarea id="{id}" role="{role}" {inputAttrTpl}','<tpl if="name"> name="{name}"</tpl>','<tpl if="placeholder"> placeholder="{placeholder}"</tpl>','<tpl if="maxLength !== undefined"> maxlength="{maxLength}"</tpl>','<tpl if="readOnly"> readonly="readonly"</tpl>','<tpl if="disabled"> disabled="disabled"</tpl>','<tpl if="tabIdx"> tabIndex="{tabIdx}"</tpl>',' class="{fieldCls} {typeCls} {typeCls}-{ui} {inputCls}" ','<tpl if="fieldStyle"> style="{fieldStyle}"</tpl>',' autocomplete="off">\n','<tpl if="value">{[Ext.util.Format.htmlEncode(values.value)]}</tpl>',"</textarea>",{disableFormats:true}],growMin:60,growMax:1000,growAppend:"\n-",enterIsSpecial:false,preventScrollbars:false,setGrowSizePolicy:Ext.emptyFn,returnRe:/\r/g,inputCls:Ext.baseCSSPrefix+"form-textarea",extraFieldBodyCls:Ext.baseCSSPrefix+"form-textarea-body",constructor:function(A){this.callParent([A]);if(this.cols){Ext.log.warn('Ext.form.field.TextArea "cols" config was removed in Ext 5.0. Please specify a "width" or use a layout instead.')}if(this.rows){Ext.log.warn('Ext.form.field.TextArea "rows" config was removed in Ext 5.0. Please specify a "height" or use a layout instead.')}},getSubTplData:function(){var A=this,C=A.getFieldStyle(),B=A.callParent();if(A.grow){if(A.preventScrollbars){B.fieldStyle=(C||"")+";overflow:hidden;height:"+A.growMin+"px"}}return B},afterRender:function(){var A=this;A.callParent(arguments);A.needsMaxCheck=A.enforceMaxLength&&A.maxLength!==Number.MAX_VALUE&&!Ext.supports.TextAreaMaxLength;if(A.needsMaxCheck){A.inputEl.on("paste",A.onPaste,A)}},transformRawValue:function(A){return this.stripReturns(A)},getValue:function(){return this.stripReturns(this.callParent())},valueToRaw:function(A){A=this.stripReturns(A);return this.callParent([A])},stripReturns:function(A){if(A&&typeof A==="string"){A=A.replace(this.returnRe,"")}return A},onPaste:function(){var A=this;if(!A.pasteTask){A.pasteTask=new Ext.util.DelayedTask(A.pasteCheck,A)}A.pasteTask.delay(1)},pasteCheck:function(){var A=this,B=A.getValue(),C=A.maxLength;if(B.length>C){B=B.substr(0,C);A.setValue(B)}},fireKey:function(B){var C=this,A=B.getKey(),D;if(B.isSpecialKey()&&(C.enterIsSpecial||(A!==B.ENTER||B.hasModifier()))){C.fireEvent("specialkey",C,B)}if(C.needsMaxCheck&&A!==B.BACKSPACE&&A!==B.DELETE&&!B.isNavKeyPress()&&!C.isCutCopyPasteSelectAll(B,A)){D=C.getValue();if(D.length>=C.maxLength){B.stopEvent()}}},isCutCopyPasteSelectAll:function(B,A){if(B.ctrlKey){return A===B.A||A===B.C||A===B.V||A===B.X}return false},autoSize:function(){var D=this,A,F,B,C,E;if(D.grow&&D.rendered){A=D.inputEl;C=A.getWidth(true);E=Ext.util.Format.htmlEncode(A.dom.value)||"&#160;";E+=D.growAppend;E=E.replace(/\n/g,"<br/>");B=Ext.util.TextMetrics.measure(A,E,C).height+A.getPadding("tb")+D.inputWrap.getBorderWidth("tb")+D.triggerWrap.getBorderWidth("tb");B=Math.min(Math.max(B,D.growMin),D.growMax);D.bodyEl.setHeight(B);D.updateLayout();D.fireEvent("autosize",D,B)}},beforeDestroy:function(){var A=this.pasteTask;if(A){A.cancel();this.pasteTask=null}this.callParent()}});
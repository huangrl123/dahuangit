Ext.require("Ext.fx.CubicBezier",function(){var D=Math,E=D.PI,G=D.pow,A=D.sin,F=D.sqrt,C=D.abs,B=1.70158;Ext.define("Ext.fx.Easing",{singleton:true,linear:Ext.identityFn,ease:function(M){var H=0.07813-M/2,L=-0.25,P=F(0.0066+H*H),N=P-H,J=G(C(N),1/3)*(N<0?-1:1),O=-P-H,K=G(C(O),1/3)*(O<0?-1:1),I=J+K+0.25;return G(1-I,2)*3*I*0.1+(1-I)*3*I*I+I*I*I},easeIn:function(H){return G(H,1.7)},easeOut:function(H){return G(H,0.48)},easeInOut:function(L){var H=0.48-L/1.04,O=F(0.1734+H*H),M=O-H,J=G(C(M),1/3)*(M<0?-1:1),N=-O-H,K=G(C(N),1/3)*(N<0?-1:1),I=J+K+0.5;return(1-I)*3*I*I+I*I*I},backIn:function(H){return H*H*((B+1)*H-B)},backOut:function(H){H=H-1;return H*H*((B+1)*H+B)+1},elasticIn:function(H){if(H===0||H===1){return H}var I=0.3,J=I/4;return G(2,-10*H)*A((H-J)*(2*E)/I)+1},elasticOut:function(H){return 1-Ext.fx.Easing.elasticIn(1-H)},bounceIn:function(H){return 1-Ext.fx.Easing.bounceOut(1-H)},bounceOut:function(H){var I=7.5625,J=2.75,K;if(H<(1/J)){K=I*H*H}else{if(H<(2/J)){H-=(1.5/J);K=I*H*H+0.75}else{if(H<(2.5/J)){H-=(2.25/J);K=I*H*H+0.9375}else{H-=(2.625/J);K=I*H*H+0.984375}}}return K}},function(){var H=Ext.fx.Easing.self,I=H.prototype;H.addMembers({"back-in":I.backIn,"back-out":I.backOut,"ease-in":I.easeIn,"ease-out":I.easeOut,"elastic-in":I.elasticIn,"elastic-out":I.elasticOut,"bounce-in":I.bounceIn,"bounce-out":I.bounceOut,"ease-in-out":I.easeInOut})})});
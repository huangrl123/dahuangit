Ext.define("Ext.app.route.Route",{action:null,conditions:null,controller:null,allowInactive:false,url:null,before:null,caseInsensitive:false,matcherRegex:null,paramMatchingRegex:null,paramsInMatchString:null,constructor:function(B){var C=this,A;Ext.apply(C,B,{conditions:{}});A=C.url;C.paramMatchingRegex=new RegExp(/:([0-9A-Za-z\_]*)/g);C.paramsInMatchString=A.match(C.paramMatchingRegex)||[];C.matcherRegex=C.createMatcherRegex(A)},recognize:function(B){var C=this,E=C.controller,A,D;if((C.allowInactive||E.isActive())&&C.recognizes(B)){A=C.matchesFor(B);D=B.match(C.matcherRegex);D.shift();return Ext.applyIf(A,{controller:E,action:C.action,historyUrl:B,args:D})}return false},recognizes:function(A){return this.matcherRegex.test(A)},execute:function(H,C,B,D){var A=C.args||[],G=this.before,F=this.controller,E=this.createCallback(C,B,D);if(G){A.push(E);if(Ext.isString(G)){G=this.before=F[G]}if(G){G.apply(F,A)}else{Ext.log.warn("The before action: "+this.before+" was not found on the controller. The action method will not be executed.")}}else{E.resume()}},matchesFor:function(B){var F={},D=this.paramsInMatchString,E=B.match(this.matcherRegex),A=0,C=D.length;E.shift();for(;A<C;A++){F[D[A].replace(":","")]=E[A]}return F},createMatcherRegex:function(A){var E=this.paramsInMatchString,J=this.conditions,C=0,G=E.length,B=Ext.util.Format.format,I=this.caseInsensitive?"i":"",D,H,F;for(;C<G;C++){D=E[C];H=J[D];F=B("{0}",H||"([%a-zA-Z0-9\\-\\_\\s,]+)");A=A.replace(new RegExp(D),F)}return new RegExp("^"+A+"$",I)},createCallback:function(D,A,C){var B=this;C=C||B;return{resume:function(){var G=B.controller,E=B.action,F;if(Ext.isString(E)){E=G[E]}D=D&&D.args?D.args:[];F=D.pop();if(F&&!Ext.isObject(F)){D.push(F)}if(E){B.action=E;E.apply(G,D)}else{Ext.log.warn("The action: "+B.action+" was not found on the controller.")}if(A){A.call(C)}},stop:function(E){if(A){A.call(C,E)}}}}});
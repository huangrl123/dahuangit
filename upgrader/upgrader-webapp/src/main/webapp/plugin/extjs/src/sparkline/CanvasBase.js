Ext.define("Ext.sparkline.CanvasBase",{requires:["Ext.sparkline.Shape"],shapeCount:0,_pxregex:/(\d+)(px)?\s*$/i,setWidth:function(A){this.pixelWidth=A},setHeight:function(A){this.pixelHeight=A},drawLine:function(E,F,A,B,C,D){return this.drawShape([[E,F],[A,B]],C,D)},drawShape:function(D,A,C,B){return this._genShape("Shape",[D,A,C,B])},drawCircle:function(B,C,D,E,F,A){return this._genShape("Circle",[B,C,D,E,F,A])},drawPieSlice:function(C,D,E,B,A,F,G){return this._genShape("PieSlice",[C,D,E,B,A,F,G])},drawRect:function(B,C,D,A,E,F){return this._genShape("Rect",[B,C,D,A,E,F])},getElement:function(){return this.el},getLastShapeId:function(){return this.lastShapeId},reset:function(){alert("reset not implemented")},_genShape:function(B,A){var C=this.shapeCount++;A.unshift(C);return new Ext.sparkline.Shape(this,C,B,A)},appendShape:function(A){alert("appendShape not implemented")},replaceWithShape:function(A,B){alert("replaceWithShape not implemented")},insertAfterShape:function(A,B){alert("insertAfterShape not implemented")},removeShapeId:function(A){alert("removeShapeId not implemented")},getShapeAt:function(A,B){alert("getShapeAt not implemented")},render:function(){alert("render not implemented")}});
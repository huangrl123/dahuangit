Ext.define("Ext.form.field.Number",{extend:"Ext.form.field.Spinner",alias:"widget.numberfield",alternateClassName:["Ext.form.NumberField","Ext.form.Number"],allowExponential:true,allowDecimals:true,decimalSeparator:null,submitLocaleSeparator:true,decimalPrecision:2,minValue:Number.NEGATIVE_INFINITY,maxValue:Number.MAX_VALUE,step:1,minText:"The minimum value for this field is {0}",maxText:"The maximum value for this field is {0}",nanText:"{0} is not a valid number",negativeText:"The value cannot be negative",baseChars:"0123456789",autoStripChars:false,initComponent:function(){var A=this;if(A.decimalSeparator===null){A.decimalSeparator=Ext.util.Format.decimalSeparator}A.callParent();A.setMinValue(A.minValue);A.setMaxValue(A.maxValue)},getErrors:function(E){var C=this,A=C.callParent(arguments),B=Ext.String.format,D;E=Ext.isDefined(E)?E:this.processRawValue(this.getRawValue());if(E.length<1){return A}E=String(E).replace(C.decimalSeparator,".");if(isNaN(E)){A.push(B(C.nanText,E))}D=C.parseValue(E);if(C.minValue===0&&D<0){A.push(this.negativeText)}else{if(D<C.minValue){A.push(B(C.minText,C.minValue))}}if(D>C.maxValue){A.push(B(C.maxText,C.maxValue))}return A},rawToValue:function(A){var B=this.fixPrecision(this.parseValue(A));if(B===null){B=A||null}return B},valueToRaw:function(C){var A=this,B=A.decimalSeparator;C=A.parseValue(C);C=A.fixPrecision(C);C=Ext.isNumber(C)?C:parseFloat(String(C).replace(B,"."));C=isNaN(C)?"":String(C).replace(".",B);return C},getSubmitValue:function(){var A=this,B=A.callParent();if(!A.submitLocaleSeparator){B=B.replace(A.decimalSeparator,".")}return B},onChange:function(){this.toggleSpinners();this.callParent(arguments)},toggleSpinners:function(){var B=this,C=B.getValue(),A=C===null,D;if(B.spinUpEnabled||B.spinUpDisabledByToggle){D=A||C<B.maxValue;B.setSpinUpEnabled(D,true)}if(B.spinDownEnabled||B.spinDownDisabledByToggle){D=A||C>B.minValue;B.setSpinDownEnabled(D,true)}},setMinValue:function(C){var B=this,A;B.minValue=Ext.Number.from(C,Number.NEGATIVE_INFINITY);B.toggleSpinners();if(B.disableKeyFilter!==true){A=B.baseChars+"";if(B.allowExponential){A+=B.decimalSeparator+"e+-"}else{if(B.allowDecimals){A+=B.decimalSeparator}if(B.minValue<0){A+="-"}}A=Ext.String.escapeRegex(A);B.maskRe=new RegExp("["+A+"]");if(B.autoStripChars){B.stripCharsRe=new RegExp("[^"+A+"]","gi")}}},setMaxValue:function(A){this.maxValue=Ext.Number.from(A,Number.MAX_VALUE);this.toggleSpinners()},parseValue:function(A){A=parseFloat(String(A).replace(this.decimalSeparator,"."));return isNaN(A)?null:A},fixPrecision:function(D){var C=this,B=isNaN(D),A=C.decimalPrecision;if(B||!D){return B?"":D}else{if(!C.allowDecimals||A<=0){A=0}}return parseFloat(Ext.Number.toFixed(parseFloat(D),A))},beforeBlur:function(){var A=this,B=A.rawToValue(A.getRawValue());if(!Ext.isEmpty(B)){A.setValue(B)}},setSpinUpEnabled:function(B,A){this.callParent(arguments);if(!A){delete this.spinUpDisabledByToggle}else{this.spinUpDisabledByToggle=!B}},onSpinUp:function(){var A=this;if(!A.readOnly){A.setSpinValue(Ext.Number.constrain(A.getValue()+A.step,A.minValue,A.maxValue))}},setSpinDownEnabled:function(B,A){this.callParent(arguments);if(!A){delete this.spinDownDisabledByToggle}else{this.spinDownDisabledByToggle=!B}},onSpinDown:function(){var A=this;if(!A.readOnly){A.setSpinValue(Ext.Number.constrain(A.getValue()-A.step,A.minValue,A.maxValue))}},setSpinValue:function(C){var A=this,B;if(A.enforceMaxLength){if(A.fixPrecision(C).toString().length>A.maxLength){return}}A.setValue(C)}});
Ext.define("Ext.sparkline.Base",{extend:"Ext.Widget",requires:["Ext.XTemplate","Ext.sparkline.CanvasCanvas","Ext.sparkline.VmlCanvas"],cachedConfig:{baseCls:Ext.baseCSSPrefix+"sparkline",lineColor:"#157fcc",fillColor:"#def",defaultPixelsPerValue:3,tagValuesAttribute:"values",enableTagOptions:false,enableHighlight:true,highlightColor:null,highlightLighten:1.4,tooltipSkipNull:true,tooltipPrefix:"",tooltipSuffix:"",disableTooltips:false,disableInteraction:false,tipTpl:null},config:{values:null},element:{tag:"canvas",reference:"element",style:{display:"inline-block",verticalAlign:"top"},listeners:{mouseenter:"onMouseEnter",mouseleave:"onMouseLeave",mousemove:"onMouseMove"},width:0,height:0},defaultBindProperty:"values",redrawQueue:{},inheritableStatics:{sparkLineTipClass:Ext.baseCSSPrefix+"sparkline-tip-target",onClassCreated:function(B){var C=B.prototype,A=B.getConfigurator().configs,D;for(D in A){if(D!=="tipTpl"){C[Ext.Config.get(D).names.apply]=C.applyConfigChange}}}},constructor:function(A){var B=this;B.canvas=Ext.supports.Canvas?new Ext.sparkline.CanvasCanvas(B):new Ext.sparkline.VmlCanvas(B);if(!B.getDisableTooltips()){B.element.cls=Ext.sparkline.Base.sparkLineTipClass}Ext.apply(B,A);B.callParent([A]);B.el=B.element},all:function(D,C,B){var A;for(A=C.length;A--;){if(B&&C[A]===null){continue}if(C[A]!==D){return false}}return true},applyConfigChange:function(B){var A=this;A.redrawQueue[A.getId()]=A;if(!A.redrawTimer){Ext.sparkline.Base.prototype.redrawTimer=Ext.Function.requestAnimationFrame(A.processRedrawQueue)}return B},applyTipTpl:function(A){if(!A.isTemplate){A=new Ext.XTemplate(A)}return A},normalizeValue:function(B){var A;switch(B){case"undefined":B=undefined;break;case"null":B=null;break;case"true":B=true;break;case"false":B=false;break;default:A=parseFloat(B);if(B==A){B=A}}return B},normalizeValues:function(C){var A,B=[];for(A=C.length;A--;){B[A]=this.normalizeValue(C[A])}return B},doSetWidth:function(C){var B=this,A=B.element.dom;B.callParent(arguments);B.canvas.setWidth(C);B.width=C;if(B.height==null){B.setHeight(parseInt(B.measurer.getCachedStyle(A.parentNode,"line-height"),10))}else{B.redrawQueue[B.getId()]=B}},doSetHeight:function(A){var B=this;B.callParent(arguments);B.canvas.setHeight(A);B.height=A;B.redrawQueue[B.getId()]=B},updateValues:function(A){this.values=A},redraw:function(){var A=this,B;if(A.getValues()){B=A.tooltip;if(B&&B.isVisible()&&A.currentPageXY&&A.el.getRegion().contains(A.currentPageXY)){A.tooltip.triggerElement=A.el.dom}A.onUpdate();A.canvas.onOwnerUpdate();A.renderGraph()}},onUpdate:Ext.emptyFn,renderGraph:function(){var A=true;if(this.disabled){this.canvas.reset();A=false}return A},onMouseEnter:function(A){this.onMouseMove(A)},onMouseMove:function(A){this.currentPageXY=A.getPoint();this.redraw()},onMouseLeave:function(){var A=this;A.currentPageXY=A.targetX=A.targetY=null;A.redraw()},updateDisplay:function(){var B=this,A,C,E,D;if(B.currentPageXY&&B.el.getRegion().contains(B.currentPageXY)){A=B.canvas.el.getXY();D=B.getRegion(B.currentPageXY[0]-A[0],B.currentPageXY[1]-A[1]);if(D!=null&&!B.disableHighlight){B.renderHighlight(D)}B.fireEvent("sparklineregionchange",B);C=B.tooltip;if(D!=null&&C){E=B.getRegionTooltip(D);if(E){if(!B.lastTooltipHTML||E[0]!==B.lastTooltipHTML[0]||E[1]!==B.lastTooltipHTML[1]){C.setTitle(E[0]);C.update(E[1]);B.lastTooltipHTML=E}}else{C.hide()}}}},getRegion:Ext.emptyFn,getRegionTooltip:function(M){var H=this,A=H.tooltipChartTitle,K=[],G=H.getTipTpl(),L,F,C,I,B,J,E,D;L=H.getRegionFields(M);J=H.tooltipFormatter;if(J){return J(H,H,L)}if(!G){return""}if(!Ext.isArray(L)){L=[L]}F=H.tooltipFormatFieldlist;C=H.tooltipFormatFieldlistKey;if(F&&C){I=[];for(i=L.length;i--;){B=L[i][C];if((D=Ext.Array.indexOf(B,F))!=-1){I[D]=L[i]}}L=I}E=L.length;for(D=0;D<E;D++){if(!L[D].isNull||!H.getTooltipSkipNull()){Ext.apply(L[D],{prefix:H.getTooltipPrefix(),suffix:H.getTooltipSuffix()});K.push(G.apply(L[D]))}}if(A||K.length){return[A,K.join("<br>")]}return""},getRegionFields:Ext.emptyFn,calcHighlightColor:function(C){var A=this,E=A.getHighlightColor(),G=A.getHighlightLighten(),H,B,D,F;if(E){return E}if(G){H=/^#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(C)||/^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(C);if(H){D=[];B=C.length===4?16:1;for(F=0;F<3;F++){D[F]=Ext.Number.constrain(Math.round(parseInt(H[F+1],16)*B*G),0,255)}return"rgb("+D.join(",")+")"}}return C},destroy:function(){delete this.redrawQueue[this.getId()];this.callParent()}},function(A){var B=A.prototype;Ext.onReady(function(){B.tooltip=new Ext.tip.ToolTip({id:"sparklines-tooltip",target:document.body,delegate:"."+A.sparkLineTipClass,showDelay:0,dismissDelay:0,hideDelay:400})});A.onClassCreated(A);B.processRedrawQueue=function(){var C=B.redrawQueue,D;for(D in C){C[D].redraw()}B.redrawQueue={};B.redrawTimer=0}});
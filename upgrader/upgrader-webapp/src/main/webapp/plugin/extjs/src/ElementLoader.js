Ext.define("Ext.ElementLoader",{mixins:{observable:"Ext.util.Observable"},uses:["Ext.data.Connection","Ext.Ajax"],statics:{Renderer:{Html:function(B,C,A){B.getTarget().setHtml(C.responseText,A.scripts===true);return true}}},url:null,params:null,baseParams:null,autoLoad:false,target:null,loadMask:false,ajaxOptions:null,scripts:false,isLoader:true,constructor:function(B){var C=this,A;B=B||{};Ext.apply(C,B);C.setTarget(C.target);C.mixins.observable.constructor.call(C);if(C.autoLoad){A=C.autoLoad;if(A===true){A={}}C.load(A)}},setTarget:function(B){var A=this;B=Ext.get(B);if(A.target&&A.target!=B){A.abort()}A.target=B},getTarget:function(){return this.target||null},abort:function(){var A=this.active;if(A!==undefined){Ext.Ajax.abort(A.request);if(A.mask){this.removeMask()}delete this.active}},removeMask:function(){this.target.unmask()},addMask:function(A){this.target.mask(A===true?null:A)},load:function(F){if(!this.target){Ext.Error.raise("A valid target is required when loading content")}F=Ext.apply({},F);var G=this,H=Ext.isDefined(F.loadMask)?F.loadMask:G.loadMask,E=Ext.apply({},F.params),A=Ext.apply({},F.ajaxOptions),B=F.callback||G.callback,C=F.scope||G.scope||G,D=F.rendererScope||G.rendererScope||G;Ext.applyIf(A,G.ajaxOptions);Ext.applyIf(F,A);Ext.applyIf(E,G.params);Ext.apply(E,G.baseParams);Ext.applyIf(F,{url:G.url});if(!F.url){Ext.Error.raise("You must specify the URL from which content should be loaded")}Ext.apply(F,{scope:G,params:E,callback:G.onComplete});if(G.fireEvent("beforeload",G,F)===false){return}if(H){G.addMask(H)}G.active={options:F,mask:H,scope:C,rendererScope:D,callback:B,success:F.success||G.success,failure:F.failure||G.failure,renderer:F.renderer||G.renderer,scripts:Ext.isDefined(F.scripts)?F.scripts:G.scripts};G.active.request=Ext.Ajax.request(F);G.setOptions(G.active,F)},setOptions:Ext.emptyFn,onComplete:function(D,A,F){var B=this,C=B.active,G,E;if(C){E=C.scope;G=C.rendererScope;if(A){A=B.getRenderer(C.renderer).call(G,B,F,C)!==false}if(A){Ext.callback(C.success,E,[B,F,D]);B.fireEvent("load",B,F,D)}else{Ext.callback(C.failure,E,[B,F,D]);B.fireEvent("exception",B,F,D)}Ext.callback(C.callback,E,[B,A,F,D]);if(C.mask){B.removeMask()}}delete B.active},getRenderer:function(A){if(Ext.isFunction(A)){return A}return this.statics().Renderer.Html},startAutoRefresh:function(B,C){var A=this;A.stopAutoRefresh();A.autoRefresh=setInterval(function(){A.load(C)},B)},stopAutoRefresh:function(){clearInterval(this.autoRefresh);delete this.autoRefresh},isAutoRefreshing:function(){return Ext.isDefined(this.autoRefresh)},destroy:function(){var A=this;A.stopAutoRefresh();delete A.target;A.abort();A.clearListeners()}});
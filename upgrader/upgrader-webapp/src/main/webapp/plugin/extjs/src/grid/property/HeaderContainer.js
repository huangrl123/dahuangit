Ext.define("Ext.grid.property.HeaderContainer",{extend:"Ext.grid.header.Container",alternateClassName:"Ext.grid.PropertyColumnModel",nameWidth:115,nameText:"Name",valueText:"Value",dateFormat:"m/j/Y",trueText:"true",falseText:"false",nameColumnCls:Ext.baseCSSPrefix+"grid-property-name",nameColumnInnerCls:Ext.baseCSSPrefix+"grid-cell-inner-property-name",constructor:function(C,A){var B=this;B.grid=C;B.store=A;B.callParent([{isRootHeader:true,enableColumnResize:Ext.isDefined(C.enableColumnResize)?C.enableColumnResize:B.enableColumnResize,enableColumnMove:Ext.isDefined(C.enableColumnMove)?C.enableColumnMove:B.enableColumnMove,items:[{header:B.nameText,width:C.nameColumnWidth||B.nameWidth,sortable:C.sortableColumns,dataIndex:C.nameField,renderer:B.renderProp.bind(B),itemId:C.nameField,menuDisabled:true,tdCls:B.nameColumnCls,innerCls:B.nameColumnInnerCls},{header:B.valueText,renderer:B.renderCell.bind(B),getEditor:B.getCellEditor.bind(B),sortable:C.sortableColumns,flex:1,fixed:true,dataIndex:C.valueField,itemId:C.valueField,menuDisabled:true}]}]);B.grid.valueColumn=B.items.items[1]},getCellEditor:function(A){return this.grid.getCellEditor(A,this)},renderProp:function(A){return this.getPropertyName(A)},renderCell:function(F,D,A){var B=this,G=B.grid,E=G.getConfig(A.get(G.nameField),"renderer"),C=F;if(E){return E.apply(B,arguments)}if(Ext.isDate(F)){C=B.renderDate(F)}else{if(Ext.isBoolean(F)){C=B.renderBool(F)}}return Ext.util.Format.htmlEncode(C)},renderDate:Ext.util.Format.date,renderBool:function(A){return this[A?"trueText":"falseText"]},getPropertyName:function(A){return this.grid.getConfig(A,"displayName",A)}});
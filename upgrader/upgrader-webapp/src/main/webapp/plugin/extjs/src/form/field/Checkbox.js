Ext.define("Ext.form.field.Checkbox",{extend:"Ext.form.field.Base",alias:["widget.checkboxfield","widget.checkbox"],alternateClassName:"Ext.form.Checkbox",requires:["Ext.XTemplate","Ext.form.CheckboxManager"],stretchInputElFixed:false,childEls:["boxLabelEl"],fieldSubTpl:['<div class="{wrapInnerCls} {noBoxLabelCls}" role="presentation">','<tpl if="labelAlignedBefore">',"{beforeBoxLabelTpl}",'<label id="{cmpId}-boxLabelEl" data-ref="boxLabelEl" {boxLabelAttrTpl} class="{boxLabelCls} ','{boxLabelCls}-{ui} {boxLabelCls}-{boxLabelAlign} {childElCls}" for="{id}">',"{beforeBoxLabelTextTpl}","{boxLabel}","{afterBoxLabelTextTpl}","</label>","{afterBoxLabelTpl}","</tpl>",'<input type="button" id="{id}" data-ref="inputEl" role="{role}" {inputAttrTpl}','<tpl if="tabIdx"> tabIndex="{tabIdx}"</tpl>','<tpl if="disabled"> disabled="disabled"</tpl>','<tpl if="fieldStyle"> style="{fieldStyle}"</tpl>',' class="{fieldCls} {typeCls} {typeCls}-{ui} {inputCls} {inputCls}-{ui} {childElCls} {afterLabelCls}" autocomplete="off" hidefocus="true" />','<tpl if="boxLabel && !labelAlignedBefore">',"{beforeBoxLabelTpl}",'<label id="{cmpId}-boxLabelEl" data-ref="boxLabelEl" {boxLabelAttrTpl} class="{boxLabelCls} ','{boxLabelCls}-{ui} {boxLabelCls}-{boxLabelAlign} {childElCls}" for="{id}">',"{beforeBoxLabelTextTpl}","{boxLabel}","{afterBoxLabelTextTpl}","</label>","{afterBoxLabelTpl}","</tpl>","</div>",{disableFormats:true,compiled:true}],publishes:{checked:1},subTplInsertions:["beforeBoxLabelTpl","afterBoxLabelTpl","beforeBoxLabelTextTpl","afterBoxLabelTextTpl","boxLabelAttrTpl","inputAttrTpl"],isCheckbox:true,focusCls:"form-checkbox-focus",fieldBodyCls:Ext.baseCSSPrefix+"form-cb-wrap",checked:false,checkedCls:Ext.baseCSSPrefix+"form-cb-checked",boxLabelCls:Ext.baseCSSPrefix+"form-cb-label",boxLabelAlign:"after",afterLabelCls:Ext.baseCSSPrefix+"form-cb-after",wrapInnerCls:Ext.baseCSSPrefix+"form-cb-wrap-inner",noBoxLabelCls:Ext.baseCSSPrefix+"form-cb-wrap-inner-no-box-label",inputValue:"on",checkChangeEvents:[],inputType:"checkbox",ariaRole:"checkbox",onRe:/^on$/i,inputCls:Ext.baseCSSPrefix+"form-cb",initComponent:function(){var A=this,B=A.value;if(B!==undefined){A.checked=A.isChecked(B,A.inputValue)}A.callParent(arguments);A.getManager().add(A)},initValue:function(){var A=this,B=!!A.checked;A.originalValue=A.lastValue=B;A.setValue(B)},getElConfig:function(){var A=this;if(A.isChecked(A.rawValue,A.inputValue)){A.addCls(A.checkedCls)}return A.callParent()},getSubTplData:function(){var D=this,B=D.boxLabel,C=D.boxLabelAlign,A=B&&C==="before";return Ext.apply(D.callParent(),{disabled:D.readOnly||D.disabled,wrapInnerCls:D.wrapInnerCls,boxLabel:B,boxLabelCls:D.boxLabelCls,boxLabelAlign:C,labelAlignedBefore:A,afterLabelCls:A?D.afterLabelCls:"",noBoxLabelCls:!B?D.noBoxLabelCls:"",role:D.ariaRole})},initEvents:function(){var A=this;A.callParent();A.mon(A.inputEl,"click",A.onBoxClick,A,{translate:false})},setBoxLabel:function(A){var B=this;B.boxLabel=A;if(B.rendered){B.boxLabelEl.setHtml(A)}},onBoxClick:function(){var A=this;if(!A.disabled&&!A.readOnly){this.setValue(!this.checked)}},getRawValue:function(){return this.checked},getValue:function(){return this.checked},getSubmitValue:function(){var B=this.uncheckedValue,A=Ext.isDefined(B)?B:null;return this.checked?this.inputValue:A},isChecked:function(A,B){return(A===true||A==="true"||A==="1"||A===1||(((Ext.isString(A)||Ext.isNumber(A))&&B)?A==B:this.onRe.test(A)))},setRawValue:function(D){var C=this,A=C.inputEl,B=C.isChecked(D,C.inputValue);if(A){C[B?"addCls":"removeCls"](C.checkedCls)}C.checked=C.rawValue=B;if(!C.duringSetValue){C.lastValue=B}return B},setValue:function(E){var C=this,F,A,D,B;if(Ext.isArray(E)){F=C.getManager().getByName(C.name,C.getFormId()).items;D=F.length;for(A=0;A<D;++A){B=F[A];B.setValue(Ext.Array.contains(E,B.inputValue))}}else{C.duringSetValue=true;C.callParent(arguments);delete C.duringSetValue}return C},valueToRaw:Ext.identityFn,onChange:function(D,B){var A=this,C=A.handler;if(C){C.call(A.scope||A,A,D)}A.callParent(arguments);if(A.reference&&A.publishState){A.publishState("checked",D)}},resetOriginalValue:function(D){var C=this,F,B,E,A;if(!D){F=C.getManager().getByName(C.name,C.getFormId()).items;E=F.length;for(A=0;A<E;++A){B=F[A];if(B!==C){F[A].resetOriginalValue(true)}}}C.callParent()},beforeDestroy:function(){this.callParent();this.getManager().removeAtKey(this.id)},getManager:function(){return Ext.form.CheckboxManager},onEnable:function(){var B=this,A=B.inputEl;B.callParent();if(A){A.dom.disabled=B.readOnly}},setReadOnly:function(B){var C=this,A=C.inputEl;if(A){A.dom.disabled=!!B||C.disabled}C.callParent(arguments)},getFormId:function(){var B=this,A;if(!B.formId){A=B.up("form");if(A){B.formId=A.id}}return B.formId}});
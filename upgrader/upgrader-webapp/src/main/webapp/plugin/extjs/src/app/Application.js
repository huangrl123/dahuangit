Ext.define("Ext.app.Application",{extend:"Ext.app.Controller",requires:["Ext.tip.QuickTipManager","Ext.util.History","Ext.util.MixedCollection"],isApplication:true,scope:undefined,namespaces:[],paths:null,appFolder:"app",config:{name:"",enableQuickTips:true,appProperty:"app",autoCreateViewport:false,defaultToken:null,glyphFontFamily:null},onClassExtended:function(F,B,D){var K=Ext.app.Controller,I=F.prototype,A=[],C=B.autoCreateViewport,E,J,L,H,G;L=B.name||F.superclass.name;G=B.appFolder||F.superclass.appFolder;if(L){B.$namespace=L;Ext.app.addNamespaces(L)}if(B.namespaces){Ext.app.addNamespaces(B.namespaces)}if(!B["paths processed"]){if(L&&G){Ext.Loader.setPath(L,G)}J=B.paths;if(J){for(H in J){if(J.hasOwnProperty(H)){Ext.Loader.setPath(H,J[H])}}}}else{delete B["paths processed"]}if(C){if(!L){Ext.Error.raise("[Ext.app.Application] Can't resolve namespace for "+B.$className+", did you forget to specify 'name' property?")}if(C===true){C="Viewport"}else{A.push("Ext.plugin.Viewport")}K.processDependencies(I,A,L,"view",C)}if(A.length){E=D.onBeforeCreated;D.onBeforeCreated=function(M,O){var N=Ext.Array.clone(arguments);Ext.require(A,function(){return E.apply(this,N)})}}},constructor:function(A){var B=this;Ext.app.route.Router.application=B;B.callParent(arguments);if(Ext.isEmpty(B.getName())){Ext.Error.raise("[Ext.app.Application] Name property is required")}B.doInit(B);B.initNamespace();B.initControllers();B.onBeforeLaunch();B.finishInitControllers()},initNamespace:function(){var C=this,A=C.getAppProperty(),B;B=Ext.namespace(C.getName());if(B){B.getApplication=function(){return C};if(A){if(!B[A]){B[A]=C}else{if(B[A]!==C){Ext.log.warn("An existing reference is being overwritten for "+name+"."+A+". See the appProperty config.")}}}}},initControllers:function(){var B=this,D=Ext.Array.from(B.controllers);B.controllers=new Ext.util.MixedCollection();for(var A=0,C=D.length;A<C;A++){B.getController(D[A])}},finishInitControllers:function(){var C=this,D,A,B;D=C.controllers.getRange();for(A=0,B=D.length;A<B;A++){D[A].finishInit(C)}},launch:Ext.emptyFn,onBeforeLaunch:function(){var A=this,G=Ext.util.History,E=A.getDefaultToken(),C,F,B,D,H;if(A.getEnableQuickTips()){A.initQuickTips()}if(A.getAutoCreateViewport()){A.initViewport()}A.launch.call(A.scope||A);A.launched=true;A.fireEvent("launch",A);C=A.controllers.items;B=C.length;for(F=0;F<B;F++){D=C[F];D.onLaunch(A)}if(!G.ready){G.init()}H=G.getToken();if(H){A.redirectTo(H,true)}else{if(E){G.add(E)}}},getModuleClassName:function(A,B){return Ext.app.Controller.getFullName(A,B,this.getName()).absoluteName},getViewportName:function(){var A=null,B=this.getAutoCreateViewport();if(B){A=(B===true)?"Viewport":B}return A},initQuickTips:function(){Ext.tip.QuickTipManager.init()},initViewport:function(){var B=this.getView(this.getViewportName()),A;if(B){if(!B.prototype.isViewport){A={plugins:"viewport"}}this.viewport=B.create(A)}},createController:function(A){return this.getController(A)},destroyController:function(A){if(typeof A==="string"){A=this.getController(A,true)}Ext.destroy(A)},getController:function(B,F){var G=this,A=G.controllers,I,E,H,D,J,C;E=A.get(B);if(!E){C=A.items;for(D=0,H=C.length;D<H;++D){J=C[D];I=J.getModuleClassName();if(I&&I===B){E=J;break}}}if(!E&&!F){I=G.getModuleClassName(B,"controller");E=Ext.create(I,{application:G,moduleClassName:B});A.add(E);if(G._initialized){E.doInit(G)}}return E},unregister:function(A){this.controllers.remove(A)},getApplication:function(){return this},destroy:function(B){var C=this,E=C.controllers,A=Ext.namespace(C.getName()),D=C.getAppProperty();Ext.destroy(C.viewport);if(E){E.each(function(F){F.destroy(B,true)})}C.controllers=null;C.callParent([B,true]);if(A&&A[D]===C){delete A[D]}},updateGlyphFontFamily:function(A){Ext.setGlyphFontFamily(A)}});
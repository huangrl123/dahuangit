Ext.define("Ext.form.trigger.Trigger",{alias:"trigger.trigger",requires:["Ext.util.ClickRepeater"],mixins:["Ext.mixin.Factoryable"],factoryConfig:{defaultType:"trigger"},repeatClick:false,focusFieldOnClick:false,hidden:false,hideOnReadOnly:undefined,weight:0,baseCls:Ext.baseCSSPrefix+"form-trigger",focusCls:Ext.baseCSSPrefix+"form-trigger-focus",overCls:Ext.baseCSSPrefix+"form-trigger-over",clickCls:Ext.baseCSSPrefix+"form-trigger-click",validIdRe:Ext.validIdRe,renderTpl:['<div id="{triggerId}" class="{baseCls} {baseCls}-{ui} {cls} {cls}-{ui} {extraCls} ','{childElCls}"<tpl if="triggerStyle"> style="{triggerStyle}"</tpl>>',"{[values.$trigger.renderBody(values)]}","</div>"],statics:{weightComparator:function(B,A){return B.weight-A.weight}},constructor:function(A){var B=this,C;Ext.apply(B,A);if(B.compat4Mode){C=B.cls;B.focusCls=[B.focusCls,C+"-focus"];B.overCls=[B.overCls,C+"-over"];B.clickCls=[B.clickCls,C+"-click"]}if(!B.validIdRe.test(B.id)){Ext.Error.raise('Invalid trigger "id": "'+B.id+'"')}},afterFieldRender:function(){this.initEvents()},destroy:function(){var A=this,B=A.clickRepeater;if(B){B.destroy()}if(A.el){A.el.destroy()}A.el=null;A.isDestroyed=true},getBodyRenderData:Ext.emptyFn,getEl:function(){return this.el||null},getStateEl:function(){return this.el},hide:function(){var B=this,A=B.el;B.hidden=true;if(A){A.hide()}},initEvents:function(){var C=this,A=C.isFieldEnabled,D=C.getStateEl(),B=C.el;D.addClsOnOver(C.overCls,A,C);D.addClsOnClick(C.clickCls,A,C);if(C.repeatClick){C.clickRepeater=new Ext.util.ClickRepeater(B,{preventDefault:true,handler:C.onClick,listeners:{mouseup:C.onMouseUp,scope:C},scope:C})}else{C.field.mon(B,{click:C.onClick,mouseup:C.onMouseUp,scope:C})}},isFieldEnabled:function(){return !this.field.disabled},isVisible:function(){var A=this,B=A.field,C=false;if(A.hidden||!B||!A.rendered||A.isDestroyed){C=true}return !C},onClick:function(){var C=this,E=arguments,A=C.clickRepeater?E[1]:E[0],B=C.handler,D=C.field;if(B&&!D.readOnly&&C.isFieldEnabled()){Ext.callback(C.handler,C.scope,[D,C,A],0,D)}},resolveListenerScope:function(A){return this.field.resolveListenerScope(A)},onMouseUp:function(){if(this.focusFieldOnClick){this.field.inputEl.focus()}},onFieldBlur:function(){this.getStateEl().removeCls(this.focusCls)},onFieldFocus:function(){this.getStateEl().addCls(this.focusCls)},onFieldRender:function(){var B=this,A=B.el=B.field.triggerWrap.selectNode("#"+B.domId,false);A.setVisibilityMode(Ext.Element.DISPLAY);B.rendered=true},renderBody:function(C){var B=this,A=B.bodyTpl;Ext.apply(C,B.getBodyRenderData());return A?Ext.XTemplate.getTpl(B,"bodyTpl").apply(C):""},renderTrigger:function(C){var B=this,D=B.width,A=B.hidden?"display:none;":"";if(D){A+="width:"+D}return Ext.XTemplate.getTpl(B,"renderTpl").apply({$trigger:B,fieldData:C,ui:C.ui,childElCls:C.childElCls,triggerId:B.domId=B.field.id+"-trigger-"+B.id,cls:B.cls,triggerStyle:A,extraCls:B.extraCls,baseCls:B.baseCls})},setHidden:function(A){if(A!==this.hidden){this[A?"hide":"show"]()}},setVisible:function(A){this.setHidden(!A)},show:function(){var B=this,A=B.el;B.hidden=false;if(A){A.show()}}});